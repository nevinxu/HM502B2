/*
** ###################################################################
**     Compilers:           Keil ARM C/C++ Compiler
**                          Freescale C/C++ for Embedded ARM
**                          GNU C Compiler
**                          IAR ANSI C/C++ Compiler for ARM
**
**     Reference manual:    KL27P64M48SF6RM, Rev.3, Aug 2014
**     Version:             rev. 1.3, 2014-08-21
**     Build:               b140821
**
**     Abstract:
**         Extension to the CMSIS register access layer header.
**
**     Copyright (c) 2014 Freescale Semiconductor, Inc.
**     All rights reserved.
**
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**     http:                 www.freescale.com
**     mail:                 support@freescale.com
**
**     Revisions:
**     - rev. 1.0 (2014-03-27)
**         Initial version.
**     - rev. 1.1 (2014-05-26)
**         I2S registers TCR2/RCR2 and others were changed.
**         FLEXIO register FLEXIO_VERID has now bitfields: FEATURE, MINOR, MAJOR.
**         Names of the bitfields of the FLEXIO_SHIFTBUF have been changed to the appropriate register name e.g.: FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS.
**         Peripheral_BASES macros has been changed to Peripheral_BASE_PTRS, e.g.: ADC_BASES to ADC_BASE_PTRS.
**         Clock configuration for high range external oscillator has been added.
**         RFSYS module access has been added.
**     - rev. 1.2 (2014-07-10)
**         GPIO - Renamed modules PTA,PTB,PTC,PTD,PTE to GPIOA,GPIOB,GPIOC,GPIOD,GPIOE.
**         UART0 - UART0 module renamed to UART2.
**         I2S - removed MDR register.
**     - rev. 1.3 (2014-08-21)
**         UART2 - Removed ED register.
**         UART2 - Removed MODEM register.
**         UART2 - Removed IR register.
**         UART2 - Removed PFIFO register.
**         UART2 - Removed CFIFO register.
**         UART2 - Removed SFIFO register.
**         UART2 - Removed TWFIFO register.
**         UART2 - Removed TCFIFO register.
**         UART2 - Removed RWFIFO register.
**         UART2 - Removed RCFIFO register.
**         USB - Removed bitfield REG_EN in CLK_RECOVER_IRC_EN register.
**         SIM - Changed bitfield value MCGIRCLK to LIRC_CLK of bitfield CLKOUTSEL in SOPT2 register.
**         SIM - Removed bitfield DIEID in SDID register.
**
** ###################################################################
*/

/*
 * WARNING! DO NOT EDIT THIS FILE DIRECTLY!
 *
 * This file was generated automatically and any changes may be lost.
 */
#ifndef __HW_FLEXIO_REGISTERS_H__
#define __HW_FLEXIO_REGISTERS_H__

#include "MKL27Z4.h"
#include "fsl_bitaccess.h"

/*
 * MKL27Z4 FLEXIO
 *
 * The FLEXIO Memory Map/Register Definition can be found here.
 *
 * Registers defined in this header file:
 * - HW_FLEXIO_VERID - Version ID Register
 * - HW_FLEXIO_PARAM - Parameter Register
 * - HW_FLEXIO_CTRL - FlexIO Control Register
 * - HW_FLEXIO_SHIFTSTAT - Shifter Status Register
 * - HW_FLEXIO_SHIFTERR - Shifter Error Register
 * - HW_FLEXIO_TIMSTAT - Timer Status Register
 * - HW_FLEXIO_SHIFTSIEN - Shifter Status Interrupt Enable
 * - HW_FLEXIO_SHIFTEIEN - Shifter Error Interrupt Enable
 * - HW_FLEXIO_TIMIEN - Timer Interrupt Enable Register
 * - HW_FLEXIO_SHIFTSDEN - Shifter Status DMA Enable
 * - HW_FLEXIO_SHIFTCTLn - Shifter Control N Register
 * - HW_FLEXIO_SHIFTCFGn - Shifter Configuration N Register
 * - HW_FLEXIO_SHIFTBUFn - Shifter Buffer N Register
 * - HW_FLEXIO_SHIFTBUFBBSn - Shifter Buffer N Bit Byte Swapped Register
 * - HW_FLEXIO_SHIFTBUFBYSn - Shifter Buffer N Byte Swapped Register
 * - HW_FLEXIO_SHIFTBUFBISn - Shifter Buffer N Bit Swapped Register
 * - HW_FLEXIO_TIMCTLn - Timer Control N Register
 * - HW_FLEXIO_TIMCFGn - Timer Configuration N Register
 * - HW_FLEXIO_TIMCMPn - Timer Compare N Register
 *
 * - hw_flexio_t - Struct containing all module registers.
 */

#define HW_FLEXIO_INSTANCE_COUNT (1U) /*!< Number of instances of the FLEXIO module. */

/*******************************************************************************
 * HW_FLEXIO_VERID - Version ID Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_VERID - Version ID Register (RO)
 *
 * Reset value: 0x01000000U
 *
 * .
 */
typedef union _hw_flexio_verid
{
    uint32_t U;
    struct _hw_flexio_verid_bitfields
    {
        uint32_t FEATURE : 16;         /*!< [15:0] Feature Specification Number */
        uint32_t MINOR : 8;            /*!< [23:16] Minor Version Number */
        uint32_t MAJOR : 8;            /*!< [31:24] Major Version Number */
    } B;
} hw_flexio_verid_t;

/*!
 * @name Constants and macros for entire FLEXIO_VERID register
 */
/*@{*/
#define HW_FLEXIO_VERID_ADDR(x)  ((x) + 0x0U)

#define HW_FLEXIO_VERID(x)       (*(__I hw_flexio_verid_t *) HW_FLEXIO_VERID_ADDR(x))
#define HW_FLEXIO_VERID_RD(x)    (HW_FLEXIO_VERID(x).U)
/*@}*/

/*
 * Constants & macros for individual FLEXIO_VERID bitfields
 */

/*!
 * @name Register FLEXIO_VERID, field FEATURE[15:0] (RO)
 *
 * This read only field returns the feature set number.
 *
 * Values:
 * - 0 - Standard features implemented.
 * - 1 - Supports state, logic and parallel modes.
 */
/*@{*/
#define BP_FLEXIO_VERID_FEATURE (0U)       /*!< Bit position for FLEXIO_VERID_FEATURE. */
#define BM_FLEXIO_VERID_FEATURE (0x0000FFFFU) /*!< Bit mask for FLEXIO_VERID_FEATURE. */
#define BS_FLEXIO_VERID_FEATURE (16U)      /*!< Bit field size in bits for FLEXIO_VERID_FEATURE. */

/*! @brief Read current value of the FLEXIO_VERID_FEATURE field. */
#define BR_FLEXIO_VERID_FEATURE(x) (BME_UBFX32(HW_FLEXIO_VERID_ADDR(x), BP_FLEXIO_VERID_FEATURE, BS_FLEXIO_VERID_FEATURE))
/*@}*/

/*!
 * @name Register FLEXIO_VERID, field MINOR[23:16] (RO)
 *
 * This read only field returns the minor version number for the module
 * specification.
 */
/*@{*/
#define BP_FLEXIO_VERID_MINOR (16U)        /*!< Bit position for FLEXIO_VERID_MINOR. */
#define BM_FLEXIO_VERID_MINOR (0x00FF0000U) /*!< Bit mask for FLEXIO_VERID_MINOR. */
#define BS_FLEXIO_VERID_MINOR (8U)         /*!< Bit field size in bits for FLEXIO_VERID_MINOR. */

/*! @brief Read current value of the FLEXIO_VERID_MINOR field. */
#define BR_FLEXIO_VERID_MINOR(x) (BME_UBFX32(HW_FLEXIO_VERID_ADDR(x), BP_FLEXIO_VERID_MINOR, BS_FLEXIO_VERID_MINOR))
/*@}*/

/*!
 * @name Register FLEXIO_VERID, field MAJOR[31:24] (RO)
 *
 * This read only field returns the major version number for the module
 * specification.
 */
/*@{*/
#define BP_FLEXIO_VERID_MAJOR (24U)        /*!< Bit position for FLEXIO_VERID_MAJOR. */
#define BM_FLEXIO_VERID_MAJOR (0xFF000000U) /*!< Bit mask for FLEXIO_VERID_MAJOR. */
#define BS_FLEXIO_VERID_MAJOR (8U)         /*!< Bit field size in bits for FLEXIO_VERID_MAJOR. */

/*! @brief Read current value of the FLEXIO_VERID_MAJOR field. */
#define BR_FLEXIO_VERID_MAJOR(x) (BME_UBFX32(HW_FLEXIO_VERID_ADDR(x), BP_FLEXIO_VERID_MAJOR, BS_FLEXIO_VERID_MAJOR))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_PARAM - Parameter Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_PARAM - Parameter Register (RO)
 *
 * Reset value: 0x10080404U
 *
 * .
 */
typedef union _hw_flexio_param
{
    uint32_t U;
    struct _hw_flexio_param_bitfields
    {
        uint32_t SHIFTER : 8;          /*!< [7:0] Shifter Number */
        uint32_t TIMER : 8;            /*!< [15:8] Timer Number */
        uint32_t PIN : 8;              /*!< [23:16] Pin Number */
        uint32_t TRIGGER : 8;          /*!< [31:24] Trigger Number */
    } B;
} hw_flexio_param_t;

/*!
 * @name Constants and macros for entire FLEXIO_PARAM register
 */
/*@{*/
#define HW_FLEXIO_PARAM_ADDR(x)  ((x) + 0x4U)

#define HW_FLEXIO_PARAM(x)       (*(__I hw_flexio_param_t *) HW_FLEXIO_PARAM_ADDR(x))
#define HW_FLEXIO_PARAM_RD(x)    (HW_FLEXIO_PARAM(x).U)
/*@}*/

/*
 * Constants & macros for individual FLEXIO_PARAM bitfields
 */

/*!
 * @name Register FLEXIO_PARAM, field SHIFTER[7:0] (RO)
 *
 * Number of Shifters implemented.
 */
/*@{*/
#define BP_FLEXIO_PARAM_SHIFTER (0U)       /*!< Bit position for FLEXIO_PARAM_SHIFTER. */
#define BM_FLEXIO_PARAM_SHIFTER (0x000000FFU) /*!< Bit mask for FLEXIO_PARAM_SHIFTER. */
#define BS_FLEXIO_PARAM_SHIFTER (8U)       /*!< Bit field size in bits for FLEXIO_PARAM_SHIFTER. */

/*! @brief Read current value of the FLEXIO_PARAM_SHIFTER field. */
#define BR_FLEXIO_PARAM_SHIFTER(x) (BME_UBFX32(HW_FLEXIO_PARAM_ADDR(x), BP_FLEXIO_PARAM_SHIFTER, BS_FLEXIO_PARAM_SHIFTER))
/*@}*/

/*!
 * @name Register FLEXIO_PARAM, field TIMER[15:8] (RO)
 *
 * Number of Timers implemented.
 */
/*@{*/
#define BP_FLEXIO_PARAM_TIMER (8U)         /*!< Bit position for FLEXIO_PARAM_TIMER. */
#define BM_FLEXIO_PARAM_TIMER (0x0000FF00U) /*!< Bit mask for FLEXIO_PARAM_TIMER. */
#define BS_FLEXIO_PARAM_TIMER (8U)         /*!< Bit field size in bits for FLEXIO_PARAM_TIMER. */

/*! @brief Read current value of the FLEXIO_PARAM_TIMER field. */
#define BR_FLEXIO_PARAM_TIMER(x) (BME_UBFX32(HW_FLEXIO_PARAM_ADDR(x), BP_FLEXIO_PARAM_TIMER, BS_FLEXIO_PARAM_TIMER))
/*@}*/

/*!
 * @name Register FLEXIO_PARAM, field PIN[23:16] (RO)
 *
 * Number of Pins implemented.
 */
/*@{*/
#define BP_FLEXIO_PARAM_PIN  (16U)         /*!< Bit position for FLEXIO_PARAM_PIN. */
#define BM_FLEXIO_PARAM_PIN  (0x00FF0000U) /*!< Bit mask for FLEXIO_PARAM_PIN. */
#define BS_FLEXIO_PARAM_PIN  (8U)          /*!< Bit field size in bits for FLEXIO_PARAM_PIN. */

/*! @brief Read current value of the FLEXIO_PARAM_PIN field. */
#define BR_FLEXIO_PARAM_PIN(x) (BME_UBFX32(HW_FLEXIO_PARAM_ADDR(x), BP_FLEXIO_PARAM_PIN, BS_FLEXIO_PARAM_PIN))
/*@}*/

/*!
 * @name Register FLEXIO_PARAM, field TRIGGER[31:24] (RO)
 *
 * Number of external triggers implemented.
 */
/*@{*/
#define BP_FLEXIO_PARAM_TRIGGER (24U)      /*!< Bit position for FLEXIO_PARAM_TRIGGER. */
#define BM_FLEXIO_PARAM_TRIGGER (0xFF000000U) /*!< Bit mask for FLEXIO_PARAM_TRIGGER. */
#define BS_FLEXIO_PARAM_TRIGGER (8U)       /*!< Bit field size in bits for FLEXIO_PARAM_TRIGGER. */

/*! @brief Read current value of the FLEXIO_PARAM_TRIGGER field. */
#define BR_FLEXIO_PARAM_TRIGGER(x) (BME_UBFX32(HW_FLEXIO_PARAM_ADDR(x), BP_FLEXIO_PARAM_TRIGGER, BS_FLEXIO_PARAM_TRIGGER))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_CTRL - FlexIO Control Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_CTRL - FlexIO Control Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_ctrl
{
    uint32_t U;
    struct _hw_flexio_ctrl_bitfields
    {
        uint32_t FLEXEN : 1;           /*!< [0] FlexIO Enable */
        uint32_t SWRST : 1;            /*!< [1] Software Reset */
        uint32_t FASTACC : 1;          /*!< [2] Fast Access */
        uint32_t RESERVED0 : 27;       /*!< [29:3]  */
        uint32_t DBGE : 1;             /*!< [30] Debug Enable */
        uint32_t DOZEN : 1;            /*!< [31] Doze Enable */
    } B;
} hw_flexio_ctrl_t;

/*!
 * @name Constants and macros for entire FLEXIO_CTRL register
 */
/*@{*/
#define HW_FLEXIO_CTRL_ADDR(x)   ((x) + 0x8U)

#define HW_FLEXIO_CTRL(x)        (*(__IO hw_flexio_ctrl_t *) HW_FLEXIO_CTRL_ADDR(x))
#define HW_FLEXIO_CTRL_RD(x)     (HW_FLEXIO_CTRL(x).U)
#define HW_FLEXIO_CTRL_WR(x, v)  (HW_FLEXIO_CTRL(x).U = (v))
#define HW_FLEXIO_CTRL_SET(x, v) (BME_OR32(HW_FLEXIO_CTRL_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_CTRL_CLR(x, v) (BME_AND32(HW_FLEXIO_CTRL_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_CTRL_TOG(x, v) (BME_XOR32(HW_FLEXIO_CTRL_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_CTRL bitfields
 */

/*!
 * @name Register FLEXIO_CTRL, field FLEXEN[0] (RW)
 *
 * Values:
 * - 0 - FlexIO module is disabled.
 * - 1 - FlexIO module is enabled.
 */
/*@{*/
#define BP_FLEXIO_CTRL_FLEXEN (0U)         /*!< Bit position for FLEXIO_CTRL_FLEXEN. */
#define BM_FLEXIO_CTRL_FLEXEN (0x00000001U) /*!< Bit mask for FLEXIO_CTRL_FLEXEN. */
#define BS_FLEXIO_CTRL_FLEXEN (1U)         /*!< Bit field size in bits for FLEXIO_CTRL_FLEXEN. */

/*! @brief Read current value of the FLEXIO_CTRL_FLEXEN field. */
#define BR_FLEXIO_CTRL_FLEXEN(x) (BME_UBFX32(HW_FLEXIO_CTRL_ADDR(x), BP_FLEXIO_CTRL_FLEXEN, BS_FLEXIO_CTRL_FLEXEN))

/*! @brief Format value for bitfield FLEXIO_CTRL_FLEXEN. */
#define BF_FLEXIO_CTRL_FLEXEN(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_CTRL_FLEXEN) & BM_FLEXIO_CTRL_FLEXEN)

/*! @brief Set the FLEXEN field to a new value. */
#define BW_FLEXIO_CTRL_FLEXEN(x, v) (BME_BFI32(HW_FLEXIO_CTRL_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_CTRL_FLEXEN), BP_FLEXIO_CTRL_FLEXEN, 1))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field SWRST[1] (RW)
 *
 * The FlexIO Control Register is not affected by the software reset, all other
 * logic in the FlexIO is affected by the software reset and register accesses
 * are ignored until this bit is cleared. This register bit will remain set until
 * cleared by software, and the reset has cleared in the FlexIO clock domain.
 *
 * Values:
 * - 0 - Software reset is disabled
 * - 1 - Software reset is enabled, all FlexIO registers except the Control
 *     Register are reset.
 */
/*@{*/
#define BP_FLEXIO_CTRL_SWRST (1U)          /*!< Bit position for FLEXIO_CTRL_SWRST. */
#define BM_FLEXIO_CTRL_SWRST (0x00000002U) /*!< Bit mask for FLEXIO_CTRL_SWRST. */
#define BS_FLEXIO_CTRL_SWRST (1U)          /*!< Bit field size in bits for FLEXIO_CTRL_SWRST. */

/*! @brief Read current value of the FLEXIO_CTRL_SWRST field. */
#define BR_FLEXIO_CTRL_SWRST(x) (BME_UBFX32(HW_FLEXIO_CTRL_ADDR(x), BP_FLEXIO_CTRL_SWRST, BS_FLEXIO_CTRL_SWRST))

/*! @brief Format value for bitfield FLEXIO_CTRL_SWRST. */
#define BF_FLEXIO_CTRL_SWRST(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_CTRL_SWRST) & BM_FLEXIO_CTRL_SWRST)

/*! @brief Set the SWRST field to a new value. */
#define BW_FLEXIO_CTRL_SWRST(x, v) (BME_BFI32(HW_FLEXIO_CTRL_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_CTRL_SWRST), BP_FLEXIO_CTRL_SWRST, 1))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field FASTACC[2] (RW)
 *
 * Enables fast register accesses to FlexIO registers, but requires the FlexIO
 * clock to be at least twice the frequency of the bus clock.
 *
 * Values:
 * - 0 - Configures for normal register accesses to FlexIO
 * - 1 - Configures for fast register accesses to FlexIO
 */
/*@{*/
#define BP_FLEXIO_CTRL_FASTACC (2U)        /*!< Bit position for FLEXIO_CTRL_FASTACC. */
#define BM_FLEXIO_CTRL_FASTACC (0x00000004U) /*!< Bit mask for FLEXIO_CTRL_FASTACC. */
#define BS_FLEXIO_CTRL_FASTACC (1U)        /*!< Bit field size in bits for FLEXIO_CTRL_FASTACC. */

/*! @brief Read current value of the FLEXIO_CTRL_FASTACC field. */
#define BR_FLEXIO_CTRL_FASTACC(x) (BME_UBFX32(HW_FLEXIO_CTRL_ADDR(x), BP_FLEXIO_CTRL_FASTACC, BS_FLEXIO_CTRL_FASTACC))

/*! @brief Format value for bitfield FLEXIO_CTRL_FASTACC. */
#define BF_FLEXIO_CTRL_FASTACC(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_CTRL_FASTACC) & BM_FLEXIO_CTRL_FASTACC)

/*! @brief Set the FASTACC field to a new value. */
#define BW_FLEXIO_CTRL_FASTACC(x, v) (BME_BFI32(HW_FLEXIO_CTRL_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_CTRL_FASTACC), BP_FLEXIO_CTRL_FASTACC, 1))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field DBGE[30] (RW)
 *
 * Enables FlexIO operation in Debug mode.
 *
 * Values:
 * - 0 - FlexIO is disabled in debug modes.
 * - 1 - FlexIO is enabled in debug modes
 */
/*@{*/
#define BP_FLEXIO_CTRL_DBGE  (30U)         /*!< Bit position for FLEXIO_CTRL_DBGE. */
#define BM_FLEXIO_CTRL_DBGE  (0x40000000U) /*!< Bit mask for FLEXIO_CTRL_DBGE. */
#define BS_FLEXIO_CTRL_DBGE  (1U)          /*!< Bit field size in bits for FLEXIO_CTRL_DBGE. */

/*! @brief Read current value of the FLEXIO_CTRL_DBGE field. */
#define BR_FLEXIO_CTRL_DBGE(x) (BME_UBFX32(HW_FLEXIO_CTRL_ADDR(x), BP_FLEXIO_CTRL_DBGE, BS_FLEXIO_CTRL_DBGE))

/*! @brief Format value for bitfield FLEXIO_CTRL_DBGE. */
#define BF_FLEXIO_CTRL_DBGE(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_CTRL_DBGE) & BM_FLEXIO_CTRL_DBGE)

/*! @brief Set the DBGE field to a new value. */
#define BW_FLEXIO_CTRL_DBGE(x, v) (BME_BFI32(HW_FLEXIO_CTRL_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_CTRL_DBGE), BP_FLEXIO_CTRL_DBGE, 1))
/*@}*/

/*!
 * @name Register FLEXIO_CTRL, field DOZEN[31] (RW)
 *
 * Disables FlexIO operation in Doze modes. This field is ignored and the FlexIO
 * always disabled in low-leakage stop modes.
 *
 * Values:
 * - 0 - FlexIO enabled in Doze modes.
 * - 1 - FlexIO disabled in Doze modes.
 */
/*@{*/
#define BP_FLEXIO_CTRL_DOZEN (31U)         /*!< Bit position for FLEXIO_CTRL_DOZEN. */
#define BM_FLEXIO_CTRL_DOZEN (0x80000000U) /*!< Bit mask for FLEXIO_CTRL_DOZEN. */
#define BS_FLEXIO_CTRL_DOZEN (1U)          /*!< Bit field size in bits for FLEXIO_CTRL_DOZEN. */

/*! @brief Read current value of the FLEXIO_CTRL_DOZEN field. */
#define BR_FLEXIO_CTRL_DOZEN(x) (BME_UBFX32(HW_FLEXIO_CTRL_ADDR(x), BP_FLEXIO_CTRL_DOZEN, BS_FLEXIO_CTRL_DOZEN))

/*! @brief Format value for bitfield FLEXIO_CTRL_DOZEN. */
#define BF_FLEXIO_CTRL_DOZEN(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_CTRL_DOZEN) & BM_FLEXIO_CTRL_DOZEN)

/*! @brief Set the DOZEN field to a new value. */
#define BW_FLEXIO_CTRL_DOZEN(x, v) (BME_BFI32(HW_FLEXIO_CTRL_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_CTRL_DOZEN), BP_FLEXIO_CTRL_DOZEN, 1))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTSTAT - Shifter Status Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTSTAT - Shifter Status Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftstat
{
    uint32_t U;
    struct _hw_flexio_shiftstat_bitfields
    {
        uint32_t SSF : 4;              /*!< [3:0] Shifter Status Flag */
        uint32_t RESERVED0 : 28;       /*!< [31:4]  */
    } B;
} hw_flexio_shiftstat_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTSTAT register
 */
/*@{*/
#define HW_FLEXIO_SHIFTSTAT_ADDR(x) ((x) + 0x10U)

#define HW_FLEXIO_SHIFTSTAT(x)   (*(__IO hw_flexio_shiftstat_t *) HW_FLEXIO_SHIFTSTAT_ADDR(x))
#define HW_FLEXIO_SHIFTSTAT_RD(x) (HW_FLEXIO_SHIFTSTAT(x).U)
#define HW_FLEXIO_SHIFTSTAT_WR(x, v) (HW_FLEXIO_SHIFTSTAT(x).U = (v))
#define HW_FLEXIO_SHIFTSTAT_SET(x, v) (BME_OR32(HW_FLEXIO_SHIFTSTAT_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTSTAT_CLR(x, v) (BME_AND32(HW_FLEXIO_SHIFTSTAT_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTSTAT_TOG(x, v) (BME_XOR32(HW_FLEXIO_SHIFTSTAT_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTSTAT bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTSTAT, field SSF[3:0] (W1C)
 *
 * The shifter status flag is updated when one of the following events occurs:
 * For SMOD=Receive, the status flag is set when SHIFTBUF has been loaded with
 * data from Shifter (SHIFTBUF is full), and the status flag is cleared when
 * SHIFTBUF register is read. For SMOD=Transmit, the status flag is set when SHIFTBUF
 * data has been transferred to the Shifter (SHIFTBUF is empty) or when initially
 * configured for SMOD=Transmit, and the status flag is cleared when the SHIFTBUF
 * register is written. For SMOD=Match Store, the status flag is set when a match
 * has occured between SHIFTBUF and Shifter, and the status flag is cleared when
 * the SHIFTBUF register is read. For SMOD=Match Continuous, returns the current
 * match result between the SHIFTBUF and Shifter. The status flag can also be
 * cleared by writing a logic one to the flag for all modes except Match Continuous.
 *
 * Values:
 * - 0 - Status flag is clear
 * - 1 - Status flag is set
 */
/*@{*/
#define BP_FLEXIO_SHIFTSTAT_SSF (0U)       /*!< Bit position for FLEXIO_SHIFTSTAT_SSF. */
#define BM_FLEXIO_SHIFTSTAT_SSF (0x0000000FU) /*!< Bit mask for FLEXIO_SHIFTSTAT_SSF. */
#define BS_FLEXIO_SHIFTSTAT_SSF (4U)       /*!< Bit field size in bits for FLEXIO_SHIFTSTAT_SSF. */

/*! @brief Read current value of the FLEXIO_SHIFTSTAT_SSF field. */
#define BR_FLEXIO_SHIFTSTAT_SSF(x) (BME_UBFX32(HW_FLEXIO_SHIFTSTAT_ADDR(x), BP_FLEXIO_SHIFTSTAT_SSF, BS_FLEXIO_SHIFTSTAT_SSF))

/*! @brief Format value for bitfield FLEXIO_SHIFTSTAT_SSF. */
#define BF_FLEXIO_SHIFTSTAT_SSF(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTSTAT_SSF) & BM_FLEXIO_SHIFTSTAT_SSF)

/*! @brief Set the SSF field to a new value. */
#define BW_FLEXIO_SHIFTSTAT_SSF(x, v) (BME_BFI32(HW_FLEXIO_SHIFTSTAT_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_SHIFTSTAT_SSF), BP_FLEXIO_SHIFTSTAT_SSF, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTERR - Shifter Error Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTERR - Shifter Error Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shifterr
{
    uint32_t U;
    struct _hw_flexio_shifterr_bitfields
    {
        uint32_t SEF : 4;              /*!< [3:0] Shifter Error Flags */
        uint32_t RESERVED0 : 28;       /*!< [31:4]  */
    } B;
} hw_flexio_shifterr_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTERR register
 */
/*@{*/
#define HW_FLEXIO_SHIFTERR_ADDR(x) ((x) + 0x14U)

#define HW_FLEXIO_SHIFTERR(x)    (*(__IO hw_flexio_shifterr_t *) HW_FLEXIO_SHIFTERR_ADDR(x))
#define HW_FLEXIO_SHIFTERR_RD(x) (HW_FLEXIO_SHIFTERR(x).U)
#define HW_FLEXIO_SHIFTERR_WR(x, v) (HW_FLEXIO_SHIFTERR(x).U = (v))
#define HW_FLEXIO_SHIFTERR_SET(x, v) (BME_OR32(HW_FLEXIO_SHIFTERR_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTERR_CLR(x, v) (BME_AND32(HW_FLEXIO_SHIFTERR_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTERR_TOG(x, v) (BME_XOR32(HW_FLEXIO_SHIFTERR_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTERR bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTERR, field SEF[3:0] (W1C)
 *
 * The shifter error flag is set when one of the following events occurs: For
 * SMOD=Receive, indicates Shifter was ready to store new data into SHIFTBUF before
 * the previous data was read from SHIFTBUF (SHIFTBUF Overrun), or indicates
 * that the received start or stop bit does not match the expected value. For
 * SMOD=Transmit, indicates Shifter was ready to load new data from SHIFTBUF before new
 * data had been written into SHIFTBUF (SHIFTBUF Underrun). For SMOD=Match
 * Store, indicates a match event occured before the previous match data was read from
 * SHIFTBUF (SHIFTBUF Overrun). For SMOD=Match Continuous, the error flag is set
 * when a match has occured between SHIFTBUF and Shifter. Can be cleared by
 * writing logic one to the flag. For SMOD=Match Continuous, can also be cleared when
 * the SHIFTBUF register is read.
 *
 * Values:
 * - 0 - Shifter Error Flag is clear
 * - 1 - Shifter Error Flag is set
 */
/*@{*/
#define BP_FLEXIO_SHIFTERR_SEF (0U)        /*!< Bit position for FLEXIO_SHIFTERR_SEF. */
#define BM_FLEXIO_SHIFTERR_SEF (0x0000000FU) /*!< Bit mask for FLEXIO_SHIFTERR_SEF. */
#define BS_FLEXIO_SHIFTERR_SEF (4U)        /*!< Bit field size in bits for FLEXIO_SHIFTERR_SEF. */

/*! @brief Read current value of the FLEXIO_SHIFTERR_SEF field. */
#define BR_FLEXIO_SHIFTERR_SEF(x) (BME_UBFX32(HW_FLEXIO_SHIFTERR_ADDR(x), BP_FLEXIO_SHIFTERR_SEF, BS_FLEXIO_SHIFTERR_SEF))

/*! @brief Format value for bitfield FLEXIO_SHIFTERR_SEF. */
#define BF_FLEXIO_SHIFTERR_SEF(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTERR_SEF) & BM_FLEXIO_SHIFTERR_SEF)

/*! @brief Set the SEF field to a new value. */
#define BW_FLEXIO_SHIFTERR_SEF(x, v) (BME_BFI32(HW_FLEXIO_SHIFTERR_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_SHIFTERR_SEF), BP_FLEXIO_SHIFTERR_SEF, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_TIMSTAT - Timer Status Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_TIMSTAT - Timer Status Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_timstat
{
    uint32_t U;
    struct _hw_flexio_timstat_bitfields
    {
        uint32_t TSF : 4;              /*!< [3:0] Timer Status Flags */
        uint32_t RESERVED0 : 28;       /*!< [31:4]  */
    } B;
} hw_flexio_timstat_t;

/*!
 * @name Constants and macros for entire FLEXIO_TIMSTAT register
 */
/*@{*/
#define HW_FLEXIO_TIMSTAT_ADDR(x) ((x) + 0x18U)

#define HW_FLEXIO_TIMSTAT(x)     (*(__IO hw_flexio_timstat_t *) HW_FLEXIO_TIMSTAT_ADDR(x))
#define HW_FLEXIO_TIMSTAT_RD(x)  (HW_FLEXIO_TIMSTAT(x).U)
#define HW_FLEXIO_TIMSTAT_WR(x, v) (HW_FLEXIO_TIMSTAT(x).U = (v))
#define HW_FLEXIO_TIMSTAT_SET(x, v) (BME_OR32(HW_FLEXIO_TIMSTAT_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_TIMSTAT_CLR(x, v) (BME_AND32(HW_FLEXIO_TIMSTAT_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_TIMSTAT_TOG(x, v) (BME_XOR32(HW_FLEXIO_TIMSTAT_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMSTAT bitfields
 */

/*!
 * @name Register FLEXIO_TIMSTAT, field TSF[3:0] (W1C)
 *
 * The timer status flag sets depending on the timer mode, and can be cleared by
 * writing logic one to the flag. In 8-bit counter mode, the timer status flag
 * is set when the upper 8-bit counter equals zero and decrements, this also
 * causes the counter to reload with the value in the compare register. In 8-bit PWM
 * mode, the timer status flag is set when the upper 8-bit counter equals zero and
 * decrements, this also causes the counter to reload with the value in the
 * compare register.. In 16-bit counter mode, the timer status flag is set when the
 * 16-bit counter equals zero and decrements, this also causes the counter to
 * reload with the value in the compare register..
 *
 * Values:
 * - 0 - Timer Status Flag is clear
 * - 1 - Timer Status Flag is set
 */
/*@{*/
#define BP_FLEXIO_TIMSTAT_TSF (0U)         /*!< Bit position for FLEXIO_TIMSTAT_TSF. */
#define BM_FLEXIO_TIMSTAT_TSF (0x0000000FU) /*!< Bit mask for FLEXIO_TIMSTAT_TSF. */
#define BS_FLEXIO_TIMSTAT_TSF (4U)         /*!< Bit field size in bits for FLEXIO_TIMSTAT_TSF. */

/*! @brief Read current value of the FLEXIO_TIMSTAT_TSF field. */
#define BR_FLEXIO_TIMSTAT_TSF(x) (BME_UBFX32(HW_FLEXIO_TIMSTAT_ADDR(x), BP_FLEXIO_TIMSTAT_TSF, BS_FLEXIO_TIMSTAT_TSF))

/*! @brief Format value for bitfield FLEXIO_TIMSTAT_TSF. */
#define BF_FLEXIO_TIMSTAT_TSF(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMSTAT_TSF) & BM_FLEXIO_TIMSTAT_TSF)

/*! @brief Set the TSF field to a new value. */
#define BW_FLEXIO_TIMSTAT_TSF(x, v) (BME_BFI32(HW_FLEXIO_TIMSTAT_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_TIMSTAT_TSF), BP_FLEXIO_TIMSTAT_TSF, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTSIEN - Shifter Status Interrupt Enable
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTSIEN - Shifter Status Interrupt Enable (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftsien
{
    uint32_t U;
    struct _hw_flexio_shiftsien_bitfields
    {
        uint32_t SSIE : 4;             /*!< [3:0] Shifter Status Interrupt Enable */
        uint32_t RESERVED0 : 28;       /*!< [31:4]  */
    } B;
} hw_flexio_shiftsien_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTSIEN register
 */
/*@{*/
#define HW_FLEXIO_SHIFTSIEN_ADDR(x) ((x) + 0x20U)

#define HW_FLEXIO_SHIFTSIEN(x)   (*(__IO hw_flexio_shiftsien_t *) HW_FLEXIO_SHIFTSIEN_ADDR(x))
#define HW_FLEXIO_SHIFTSIEN_RD(x) (HW_FLEXIO_SHIFTSIEN(x).U)
#define HW_FLEXIO_SHIFTSIEN_WR(x, v) (HW_FLEXIO_SHIFTSIEN(x).U = (v))
#define HW_FLEXIO_SHIFTSIEN_SET(x, v) (BME_OR32(HW_FLEXIO_SHIFTSIEN_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTSIEN_CLR(x, v) (BME_AND32(HW_FLEXIO_SHIFTSIEN_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTSIEN_TOG(x, v) (BME_XOR32(HW_FLEXIO_SHIFTSIEN_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTSIEN bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTSIEN, field SSIE[3:0] (RW)
 *
 * Enables interrupt generation when corresponding SSF is set.
 *
 * Values:
 * - 0 - Shifter Status Flag interrupt disabled
 * - 1 - Shifter Status Flag interrupt enabled
 */
/*@{*/
#define BP_FLEXIO_SHIFTSIEN_SSIE (0U)      /*!< Bit position for FLEXIO_SHIFTSIEN_SSIE. */
#define BM_FLEXIO_SHIFTSIEN_SSIE (0x0000000FU) /*!< Bit mask for FLEXIO_SHIFTSIEN_SSIE. */
#define BS_FLEXIO_SHIFTSIEN_SSIE (4U)      /*!< Bit field size in bits for FLEXIO_SHIFTSIEN_SSIE. */

/*! @brief Read current value of the FLEXIO_SHIFTSIEN_SSIE field. */
#define BR_FLEXIO_SHIFTSIEN_SSIE(x) (BME_UBFX32(HW_FLEXIO_SHIFTSIEN_ADDR(x), BP_FLEXIO_SHIFTSIEN_SSIE, BS_FLEXIO_SHIFTSIEN_SSIE))

/*! @brief Format value for bitfield FLEXIO_SHIFTSIEN_SSIE. */
#define BF_FLEXIO_SHIFTSIEN_SSIE(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTSIEN_SSIE) & BM_FLEXIO_SHIFTSIEN_SSIE)

/*! @brief Set the SSIE field to a new value. */
#define BW_FLEXIO_SHIFTSIEN_SSIE(x, v) (BME_BFI32(HW_FLEXIO_SHIFTSIEN_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_SHIFTSIEN_SSIE), BP_FLEXIO_SHIFTSIEN_SSIE, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTEIEN - Shifter Error Interrupt Enable
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTEIEN - Shifter Error Interrupt Enable (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shifteien
{
    uint32_t U;
    struct _hw_flexio_shifteien_bitfields
    {
        uint32_t SEIE : 4;             /*!< [3:0] Shifter Error Interrupt Enable */
        uint32_t RESERVED0 : 28;       /*!< [31:4]  */
    } B;
} hw_flexio_shifteien_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTEIEN register
 */
/*@{*/
#define HW_FLEXIO_SHIFTEIEN_ADDR(x) ((x) + 0x24U)

#define HW_FLEXIO_SHIFTEIEN(x)   (*(__IO hw_flexio_shifteien_t *) HW_FLEXIO_SHIFTEIEN_ADDR(x))
#define HW_FLEXIO_SHIFTEIEN_RD(x) (HW_FLEXIO_SHIFTEIEN(x).U)
#define HW_FLEXIO_SHIFTEIEN_WR(x, v) (HW_FLEXIO_SHIFTEIEN(x).U = (v))
#define HW_FLEXIO_SHIFTEIEN_SET(x, v) (BME_OR32(HW_FLEXIO_SHIFTEIEN_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTEIEN_CLR(x, v) (BME_AND32(HW_FLEXIO_SHIFTEIEN_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTEIEN_TOG(x, v) (BME_XOR32(HW_FLEXIO_SHIFTEIEN_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTEIEN bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTEIEN, field SEIE[3:0] (RW)
 *
 * Enables interrupt generation when corresponding SEF is set.
 *
 * Values:
 * - 0 - Shifter Error Flag interrupt disabled
 * - 1 - Shifter Error Flag interrupt enabled
 */
/*@{*/
#define BP_FLEXIO_SHIFTEIEN_SEIE (0U)      /*!< Bit position for FLEXIO_SHIFTEIEN_SEIE. */
#define BM_FLEXIO_SHIFTEIEN_SEIE (0x0000000FU) /*!< Bit mask for FLEXIO_SHIFTEIEN_SEIE. */
#define BS_FLEXIO_SHIFTEIEN_SEIE (4U)      /*!< Bit field size in bits for FLEXIO_SHIFTEIEN_SEIE. */

/*! @brief Read current value of the FLEXIO_SHIFTEIEN_SEIE field. */
#define BR_FLEXIO_SHIFTEIEN_SEIE(x) (BME_UBFX32(HW_FLEXIO_SHIFTEIEN_ADDR(x), BP_FLEXIO_SHIFTEIEN_SEIE, BS_FLEXIO_SHIFTEIEN_SEIE))

/*! @brief Format value for bitfield FLEXIO_SHIFTEIEN_SEIE. */
#define BF_FLEXIO_SHIFTEIEN_SEIE(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTEIEN_SEIE) & BM_FLEXIO_SHIFTEIEN_SEIE)

/*! @brief Set the SEIE field to a new value. */
#define BW_FLEXIO_SHIFTEIEN_SEIE(x, v) (BME_BFI32(HW_FLEXIO_SHIFTEIEN_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_SHIFTEIEN_SEIE), BP_FLEXIO_SHIFTEIEN_SEIE, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_TIMIEN - Timer Interrupt Enable Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_TIMIEN - Timer Interrupt Enable Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_timien
{
    uint32_t U;
    struct _hw_flexio_timien_bitfields
    {
        uint32_t TEIE : 4;             /*!< [3:0] Timer Status Interrupt Enable */
        uint32_t RESERVED0 : 28;       /*!< [31:4]  */
    } B;
} hw_flexio_timien_t;

/*!
 * @name Constants and macros for entire FLEXIO_TIMIEN register
 */
/*@{*/
#define HW_FLEXIO_TIMIEN_ADDR(x) ((x) + 0x28U)

#define HW_FLEXIO_TIMIEN(x)      (*(__IO hw_flexio_timien_t *) HW_FLEXIO_TIMIEN_ADDR(x))
#define HW_FLEXIO_TIMIEN_RD(x)   (HW_FLEXIO_TIMIEN(x).U)
#define HW_FLEXIO_TIMIEN_WR(x, v) (HW_FLEXIO_TIMIEN(x).U = (v))
#define HW_FLEXIO_TIMIEN_SET(x, v) (BME_OR32(HW_FLEXIO_TIMIEN_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_TIMIEN_CLR(x, v) (BME_AND32(HW_FLEXIO_TIMIEN_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_TIMIEN_TOG(x, v) (BME_XOR32(HW_FLEXIO_TIMIEN_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMIEN bitfields
 */

/*!
 * @name Register FLEXIO_TIMIEN, field TEIE[3:0] (RW)
 *
 * Enables interrupt generation when corresponding TSF is set.
 *
 * Values:
 * - 0 - Timer Status Flag interrupt is disabled
 * - 1 - Timer Status Flag interrupt is enabled
 */
/*@{*/
#define BP_FLEXIO_TIMIEN_TEIE (0U)         /*!< Bit position for FLEXIO_TIMIEN_TEIE. */
#define BM_FLEXIO_TIMIEN_TEIE (0x0000000FU) /*!< Bit mask for FLEXIO_TIMIEN_TEIE. */
#define BS_FLEXIO_TIMIEN_TEIE (4U)         /*!< Bit field size in bits for FLEXIO_TIMIEN_TEIE. */

/*! @brief Read current value of the FLEXIO_TIMIEN_TEIE field. */
#define BR_FLEXIO_TIMIEN_TEIE(x) (BME_UBFX32(HW_FLEXIO_TIMIEN_ADDR(x), BP_FLEXIO_TIMIEN_TEIE, BS_FLEXIO_TIMIEN_TEIE))

/*! @brief Format value for bitfield FLEXIO_TIMIEN_TEIE. */
#define BF_FLEXIO_TIMIEN_TEIE(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMIEN_TEIE) & BM_FLEXIO_TIMIEN_TEIE)

/*! @brief Set the TEIE field to a new value. */
#define BW_FLEXIO_TIMIEN_TEIE(x, v) (BME_BFI32(HW_FLEXIO_TIMIEN_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_TIMIEN_TEIE), BP_FLEXIO_TIMIEN_TEIE, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTSDEN - Shifter Status DMA Enable
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTSDEN - Shifter Status DMA Enable (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftsden
{
    uint32_t U;
    struct _hw_flexio_shiftsden_bitfields
    {
        uint32_t SSDE : 4;             /*!< [3:0] Shifter Status DMA Enable */
        uint32_t RESERVED0 : 28;       /*!< [31:4]  */
    } B;
} hw_flexio_shiftsden_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTSDEN register
 */
/*@{*/
#define HW_FLEXIO_SHIFTSDEN_ADDR(x) ((x) + 0x30U)

#define HW_FLEXIO_SHIFTSDEN(x)   (*(__IO hw_flexio_shiftsden_t *) HW_FLEXIO_SHIFTSDEN_ADDR(x))
#define HW_FLEXIO_SHIFTSDEN_RD(x) (HW_FLEXIO_SHIFTSDEN(x).U)
#define HW_FLEXIO_SHIFTSDEN_WR(x, v) (HW_FLEXIO_SHIFTSDEN(x).U = (v))
#define HW_FLEXIO_SHIFTSDEN_SET(x, v) (BME_OR32(HW_FLEXIO_SHIFTSDEN_ADDR(x), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTSDEN_CLR(x, v) (BME_AND32(HW_FLEXIO_SHIFTSDEN_ADDR(x), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTSDEN_TOG(x, v) (BME_XOR32(HW_FLEXIO_SHIFTSDEN_ADDR(x), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTSDEN bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTSDEN, field SSDE[3:0] (RW)
 *
 * Enables DMA request generation when corresponding SSF is set.
 *
 * Values:
 * - 0 - Shifter Status Flag DMA request is disabled
 * - 1 - Shifter Status Flag DMA request is enabled
 */
/*@{*/
#define BP_FLEXIO_SHIFTSDEN_SSDE (0U)      /*!< Bit position for FLEXIO_SHIFTSDEN_SSDE. */
#define BM_FLEXIO_SHIFTSDEN_SSDE (0x0000000FU) /*!< Bit mask for FLEXIO_SHIFTSDEN_SSDE. */
#define BS_FLEXIO_SHIFTSDEN_SSDE (4U)      /*!< Bit field size in bits for FLEXIO_SHIFTSDEN_SSDE. */

/*! @brief Read current value of the FLEXIO_SHIFTSDEN_SSDE field. */
#define BR_FLEXIO_SHIFTSDEN_SSDE(x) (BME_UBFX32(HW_FLEXIO_SHIFTSDEN_ADDR(x), BP_FLEXIO_SHIFTSDEN_SSDE, BS_FLEXIO_SHIFTSDEN_SSDE))

/*! @brief Format value for bitfield FLEXIO_SHIFTSDEN_SSDE. */
#define BF_FLEXIO_SHIFTSDEN_SSDE(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTSDEN_SSDE) & BM_FLEXIO_SHIFTSDEN_SSDE)

/*! @brief Set the SSDE field to a new value. */
#define BW_FLEXIO_SHIFTSDEN_SSDE(x, v) (BME_BFI32(HW_FLEXIO_SHIFTSDEN_ADDR(x), ((uint32_t)(v) << BP_FLEXIO_SHIFTSDEN_SSDE), BP_FLEXIO_SHIFTSDEN_SSDE, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTCTLn - Shifter Control N Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTCTLn - Shifter Control N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftctln
{
    uint32_t U;
    struct _hw_flexio_shiftctln_bitfields
    {
        uint32_t SMOD : 3;             /*!< [2:0] Shifter Mode */
        uint32_t RESERVED0 : 4;        /*!< [6:3]  */
        uint32_t PINPOL : 1;           /*!< [7] Shifter Pin Polarity */
        uint32_t PINSEL : 3;           /*!< [10:8] Shifter Pin Select */
        uint32_t RESERVED1 : 5;        /*!< [15:11]  */
        uint32_t PINCFG : 2;           /*!< [17:16] Shifter Pin Configuration */
        uint32_t RESERVED2 : 5;        /*!< [22:18]  */
        uint32_t TIMPOL : 1;           /*!< [23] Timer Polarity */
        uint32_t TIMSEL : 2;           /*!< [25:24] Timer Select */
        uint32_t RESERVED3 : 6;        /*!< [31:26]  */
    } B;
} hw_flexio_shiftctln_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTCTLn register
 */
/*@{*/
#define HW_FLEXIO_SHIFTCTLn_COUNT (4U)

#define HW_FLEXIO_SHIFTCTLn_ADDR(x, n) ((x) + 0x80U + (0x4U * (n)))

#define HW_FLEXIO_SHIFTCTLn(x, n) (*(__IO hw_flexio_shiftctln_t *) HW_FLEXIO_SHIFTCTLn_ADDR(x, n))
#define HW_FLEXIO_SHIFTCTLn_RD(x, n) (HW_FLEXIO_SHIFTCTLn(x, n).U)
#define HW_FLEXIO_SHIFTCTLn_WR(x, n, v) (HW_FLEXIO_SHIFTCTLn(x, n).U = (v))
#define HW_FLEXIO_SHIFTCTLn_SET(x, n, v) (BME_OR32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTCTLn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTCTLn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTCTLn bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTCTLn, field SMOD[2:0] (RW)
 *
 * Configures the mode of the Shifter.
 *
 * Values:
 * - 000 - Disabled.
 * - 001 - Receive mode. Captures the current Shifter content into the SHIFTBUF
 *     on expiration of the Timer.
 * - 010 - Transmit mode. Load SHIFTBUF contents into the Shifter on expiration
 *     of the Timer.
 * - 011 - Reserved.
 * - 100 - Match Store mode. Shifter data is compared to SHIFTBUF content on
 *     expiration of the Timer.
 * - 101 - Match Continuous mode. Shifter data is continuously compared to
 *     SHIFTBUF contents.
 * - 110 - Reserved.
 * - 111 - Reserved.
 */
/*@{*/
#define BP_FLEXIO_SHIFTCTLn_SMOD (0U)      /*!< Bit position for FLEXIO_SHIFTCTLn_SMOD. */
#define BM_FLEXIO_SHIFTCTLn_SMOD (0x00000007U) /*!< Bit mask for FLEXIO_SHIFTCTLn_SMOD. */
#define BS_FLEXIO_SHIFTCTLn_SMOD (3U)      /*!< Bit field size in bits for FLEXIO_SHIFTCTLn_SMOD. */

/*! @brief Read current value of the FLEXIO_SHIFTCTLn_SMOD field. */
#define BR_FLEXIO_SHIFTCTLn_SMOD(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), BP_FLEXIO_SHIFTCTLn_SMOD, BS_FLEXIO_SHIFTCTLn_SMOD))

/*! @brief Format value for bitfield FLEXIO_SHIFTCTLn_SMOD. */
#define BF_FLEXIO_SHIFTCTLn_SMOD(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_SMOD) & BM_FLEXIO_SHIFTCTLn_SMOD)

/*! @brief Set the SMOD field to a new value. */
#define BW_FLEXIO_SHIFTCTLn_SMOD(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_SMOD), BP_FLEXIO_SHIFTCTLn_SMOD, 3))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTLn, field PINPOL[7] (RW)
 *
 * Values:
 * - 0 - Pin is active high
 * - 1 - Pin is active low
 */
/*@{*/
#define BP_FLEXIO_SHIFTCTLn_PINPOL (7U)    /*!< Bit position for FLEXIO_SHIFTCTLn_PINPOL. */
#define BM_FLEXIO_SHIFTCTLn_PINPOL (0x00000080U) /*!< Bit mask for FLEXIO_SHIFTCTLn_PINPOL. */
#define BS_FLEXIO_SHIFTCTLn_PINPOL (1U)    /*!< Bit field size in bits for FLEXIO_SHIFTCTLn_PINPOL. */

/*! @brief Read current value of the FLEXIO_SHIFTCTLn_PINPOL field. */
#define BR_FLEXIO_SHIFTCTLn_PINPOL(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), BP_FLEXIO_SHIFTCTLn_PINPOL, BS_FLEXIO_SHIFTCTLn_PINPOL))

/*! @brief Format value for bitfield FLEXIO_SHIFTCTLn_PINPOL. */
#define BF_FLEXIO_SHIFTCTLn_PINPOL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_PINPOL) & BM_FLEXIO_SHIFTCTLn_PINPOL)

/*! @brief Set the PINPOL field to a new value. */
#define BW_FLEXIO_SHIFTCTLn_PINPOL(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_PINPOL), BP_FLEXIO_SHIFTCTLn_PINPOL, 1))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTLn, field PINSEL[10:8] (RW)
 *
 * Selects which pin is used by the Shifter input or output.
 */
/*@{*/
#define BP_FLEXIO_SHIFTCTLn_PINSEL (8U)    /*!< Bit position for FLEXIO_SHIFTCTLn_PINSEL. */
#define BM_FLEXIO_SHIFTCTLn_PINSEL (0x00000700U) /*!< Bit mask for FLEXIO_SHIFTCTLn_PINSEL. */
#define BS_FLEXIO_SHIFTCTLn_PINSEL (3U)    /*!< Bit field size in bits for FLEXIO_SHIFTCTLn_PINSEL. */

/*! @brief Read current value of the FLEXIO_SHIFTCTLn_PINSEL field. */
#define BR_FLEXIO_SHIFTCTLn_PINSEL(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), BP_FLEXIO_SHIFTCTLn_PINSEL, BS_FLEXIO_SHIFTCTLn_PINSEL))

/*! @brief Format value for bitfield FLEXIO_SHIFTCTLn_PINSEL. */
#define BF_FLEXIO_SHIFTCTLn_PINSEL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_PINSEL) & BM_FLEXIO_SHIFTCTLn_PINSEL)

/*! @brief Set the PINSEL field to a new value. */
#define BW_FLEXIO_SHIFTCTLn_PINSEL(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_PINSEL), BP_FLEXIO_SHIFTCTLn_PINSEL, 3))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTLn, field PINCFG[17:16] (RW)
 *
 * Values:
 * - 00 - Shifter pin output disabled
 * - 01 - Shifter pin open drain or bidirectional output enable
 * - 10 - Shifter pin bidirectional output data
 * - 11 - Shifter pin output
 */
/*@{*/
#define BP_FLEXIO_SHIFTCTLn_PINCFG (16U)   /*!< Bit position for FLEXIO_SHIFTCTLn_PINCFG. */
#define BM_FLEXIO_SHIFTCTLn_PINCFG (0x00030000U) /*!< Bit mask for FLEXIO_SHIFTCTLn_PINCFG. */
#define BS_FLEXIO_SHIFTCTLn_PINCFG (2U)    /*!< Bit field size in bits for FLEXIO_SHIFTCTLn_PINCFG. */

/*! @brief Read current value of the FLEXIO_SHIFTCTLn_PINCFG field. */
#define BR_FLEXIO_SHIFTCTLn_PINCFG(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), BP_FLEXIO_SHIFTCTLn_PINCFG, BS_FLEXIO_SHIFTCTLn_PINCFG))

/*! @brief Format value for bitfield FLEXIO_SHIFTCTLn_PINCFG. */
#define BF_FLEXIO_SHIFTCTLn_PINCFG(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_PINCFG) & BM_FLEXIO_SHIFTCTLn_PINCFG)

/*! @brief Set the PINCFG field to a new value. */
#define BW_FLEXIO_SHIFTCTLn_PINCFG(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_PINCFG), BP_FLEXIO_SHIFTCTLn_PINCFG, 2))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTLn, field TIMPOL[23] (RW)
 *
 * Values:
 * - 0 - Shift on posedge of Shift clock
 * - 1 - Shift on negedge of Shift clock
 */
/*@{*/
#define BP_FLEXIO_SHIFTCTLn_TIMPOL (23U)   /*!< Bit position for FLEXIO_SHIFTCTLn_TIMPOL. */
#define BM_FLEXIO_SHIFTCTLn_TIMPOL (0x00800000U) /*!< Bit mask for FLEXIO_SHIFTCTLn_TIMPOL. */
#define BS_FLEXIO_SHIFTCTLn_TIMPOL (1U)    /*!< Bit field size in bits for FLEXIO_SHIFTCTLn_TIMPOL. */

/*! @brief Read current value of the FLEXIO_SHIFTCTLn_TIMPOL field. */
#define BR_FLEXIO_SHIFTCTLn_TIMPOL(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), BP_FLEXIO_SHIFTCTLn_TIMPOL, BS_FLEXIO_SHIFTCTLn_TIMPOL))

/*! @brief Format value for bitfield FLEXIO_SHIFTCTLn_TIMPOL. */
#define BF_FLEXIO_SHIFTCTLn_TIMPOL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_TIMPOL) & BM_FLEXIO_SHIFTCTLn_TIMPOL)

/*! @brief Set the TIMPOL field to a new value. */
#define BW_FLEXIO_SHIFTCTLn_TIMPOL(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_TIMPOL), BP_FLEXIO_SHIFTCTLn_TIMPOL, 1))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCTLn, field TIMSEL[25:24] (RW)
 *
 * Selects which Timer is used for controlling the logic/shift register and
 * generating the Shift clock.
 */
/*@{*/
#define BP_FLEXIO_SHIFTCTLn_TIMSEL (24U)   /*!< Bit position for FLEXIO_SHIFTCTLn_TIMSEL. */
#define BM_FLEXIO_SHIFTCTLn_TIMSEL (0x03000000U) /*!< Bit mask for FLEXIO_SHIFTCTLn_TIMSEL. */
#define BS_FLEXIO_SHIFTCTLn_TIMSEL (2U)    /*!< Bit field size in bits for FLEXIO_SHIFTCTLn_TIMSEL. */

/*! @brief Read current value of the FLEXIO_SHIFTCTLn_TIMSEL field. */
#define BR_FLEXIO_SHIFTCTLn_TIMSEL(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), BP_FLEXIO_SHIFTCTLn_TIMSEL, BS_FLEXIO_SHIFTCTLn_TIMSEL))

/*! @brief Format value for bitfield FLEXIO_SHIFTCTLn_TIMSEL. */
#define BF_FLEXIO_SHIFTCTLn_TIMSEL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_TIMSEL) & BM_FLEXIO_SHIFTCTLn_TIMSEL)

/*! @brief Set the TIMSEL field to a new value. */
#define BW_FLEXIO_SHIFTCTLn_TIMSEL(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCTLn_TIMSEL), BP_FLEXIO_SHIFTCTLn_TIMSEL, 2))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTCFGn - Shifter Configuration N Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTCFGn - Shifter Configuration N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftcfgn
{
    uint32_t U;
    struct _hw_flexio_shiftcfgn_bitfields
    {
        uint32_t SSTART : 2;           /*!< [1:0] Shifter Start bit */
        uint32_t RESERVED0 : 2;        /*!< [3:2]  */
        uint32_t SSTOP : 2;            /*!< [5:4] Shifter Stop bit */
        uint32_t RESERVED1 : 2;        /*!< [7:6]  */
        uint32_t INSRC : 1;            /*!< [8] Input Source */
        uint32_t RESERVED2 : 23;       /*!< [31:9]  */
    } B;
} hw_flexio_shiftcfgn_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTCFGn register
 */
/*@{*/
#define HW_FLEXIO_SHIFTCFGn_COUNT (4U)

#define HW_FLEXIO_SHIFTCFGn_ADDR(x, n) ((x) + 0x100U + (0x4U * (n)))

#define HW_FLEXIO_SHIFTCFGn(x, n) (*(__IO hw_flexio_shiftcfgn_t *) HW_FLEXIO_SHIFTCFGn_ADDR(x, n))
#define HW_FLEXIO_SHIFTCFGn_RD(x, n) (HW_FLEXIO_SHIFTCFGn(x, n).U)
#define HW_FLEXIO_SHIFTCFGn_WR(x, n, v) (HW_FLEXIO_SHIFTCFGn(x, n).U = (v))
#define HW_FLEXIO_SHIFTCFGn_SET(x, n, v) (BME_OR32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTCFGn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTCFGn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTCFGn bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTCFGn, field SSTART[1:0] (RW)
 *
 * For SMOD=Transmit, this field allows automatic start bit insertion if the
 * selected timer has also enabled a start bit. For SMOD=Receive or Match Store,
 * this field allows automatic start bit checking if the selected timer has also
 * enabled a start bit.
 *
 * Values:
 * - 00 - Start bit disabled for transmitter/receiver/match store, transmitter
 *     loads data on enable
 * - 01 - Start bit disabled for transmitter/receiver/match store, transmitter
 *     loads data on first shift
 * - 10 - Transmitter outputs start bit value 0 before loading data on first
 *     shift, receiver/match store sets error flag if start bit is not 0
 * - 11 - Transmitter outputs start bit value 1 before loading data on first
 *     shift, receiver/match store sets error flag if start bit is not 1
 */
/*@{*/
#define BP_FLEXIO_SHIFTCFGn_SSTART (0U)    /*!< Bit position for FLEXIO_SHIFTCFGn_SSTART. */
#define BM_FLEXIO_SHIFTCFGn_SSTART (0x00000003U) /*!< Bit mask for FLEXIO_SHIFTCFGn_SSTART. */
#define BS_FLEXIO_SHIFTCFGn_SSTART (2U)    /*!< Bit field size in bits for FLEXIO_SHIFTCFGn_SSTART. */

/*! @brief Read current value of the FLEXIO_SHIFTCFGn_SSTART field. */
#define BR_FLEXIO_SHIFTCFGn_SSTART(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), BP_FLEXIO_SHIFTCFGn_SSTART, BS_FLEXIO_SHIFTCFGn_SSTART))

/*! @brief Format value for bitfield FLEXIO_SHIFTCFGn_SSTART. */
#define BF_FLEXIO_SHIFTCFGn_SSTART(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCFGn_SSTART) & BM_FLEXIO_SHIFTCFGn_SSTART)

/*! @brief Set the SSTART field to a new value. */
#define BW_FLEXIO_SHIFTCFGn_SSTART(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCFGn_SSTART), BP_FLEXIO_SHIFTCFGn_SSTART, 2))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCFGn, field SSTOP[5:4] (RW)
 *
 * For SMOD=Transmit, this field allows automatic stop bit insertion if the
 * selected timer has also enabled a stop bit. For SMOD=Receive or Match Store, this
 * field allows automatic stop bit checking if the selected timer has also
 * enabled a stop bit.
 *
 * Values:
 * - 00 - Stop bit disabled for transmitter/receiver/match store
 * - 01 - Reserved for transmitter/receiver/match store
 * - 10 - Transmitter outputs stop bit value 0 on store, receiver/match store
 *     sets error flag if stop bit is not 0
 * - 11 - Transmitter outputs stop bit value 1 on store, receiver/match store
 *     sets error flag if stop bit is not 1
 */
/*@{*/
#define BP_FLEXIO_SHIFTCFGn_SSTOP (4U)     /*!< Bit position for FLEXIO_SHIFTCFGn_SSTOP. */
#define BM_FLEXIO_SHIFTCFGn_SSTOP (0x00000030U) /*!< Bit mask for FLEXIO_SHIFTCFGn_SSTOP. */
#define BS_FLEXIO_SHIFTCFGn_SSTOP (2U)     /*!< Bit field size in bits for FLEXIO_SHIFTCFGn_SSTOP. */

/*! @brief Read current value of the FLEXIO_SHIFTCFGn_SSTOP field. */
#define BR_FLEXIO_SHIFTCFGn_SSTOP(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), BP_FLEXIO_SHIFTCFGn_SSTOP, BS_FLEXIO_SHIFTCFGn_SSTOP))

/*! @brief Format value for bitfield FLEXIO_SHIFTCFGn_SSTOP. */
#define BF_FLEXIO_SHIFTCFGn_SSTOP(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCFGn_SSTOP) & BM_FLEXIO_SHIFTCFGn_SSTOP)

/*! @brief Set the SSTOP field to a new value. */
#define BW_FLEXIO_SHIFTCFGn_SSTOP(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCFGn_SSTOP), BP_FLEXIO_SHIFTCFGn_SSTOP, 2))
/*@}*/

/*!
 * @name Register FLEXIO_SHIFTCFGn, field INSRC[8] (RW)
 *
 * Selects the input source for the shifter.
 *
 * Values:
 * - 0 - Pin
 * - 1 - Shifter N+1 Output
 */
/*@{*/
#define BP_FLEXIO_SHIFTCFGn_INSRC (8U)     /*!< Bit position for FLEXIO_SHIFTCFGn_INSRC. */
#define BM_FLEXIO_SHIFTCFGn_INSRC (0x00000100U) /*!< Bit mask for FLEXIO_SHIFTCFGn_INSRC. */
#define BS_FLEXIO_SHIFTCFGn_INSRC (1U)     /*!< Bit field size in bits for FLEXIO_SHIFTCFGn_INSRC. */

/*! @brief Read current value of the FLEXIO_SHIFTCFGn_INSRC field. */
#define BR_FLEXIO_SHIFTCFGn_INSRC(x, n) (BME_UBFX32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), BP_FLEXIO_SHIFTCFGn_INSRC, BS_FLEXIO_SHIFTCFGn_INSRC))

/*! @brief Format value for bitfield FLEXIO_SHIFTCFGn_INSRC. */
#define BF_FLEXIO_SHIFTCFGn_INSRC(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTCFGn_INSRC) & BM_FLEXIO_SHIFTCFGn_INSRC)

/*! @brief Set the INSRC field to a new value. */
#define BW_FLEXIO_SHIFTCFGn_INSRC(x, n, v) (BME_BFI32(HW_FLEXIO_SHIFTCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_SHIFTCFGn_INSRC), BP_FLEXIO_SHIFTCFGn_INSRC, 1))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTBUFn - Shifter Buffer N Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTBUFn - Shifter Buffer N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftbufn
{
    uint32_t U;
    struct _hw_flexio_shiftbufn_bitfields
    {
        uint32_t SHIFTBUF : 32;        /*!< [31:0] Shift Buffer */
    } B;
} hw_flexio_shiftbufn_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFn register
 */
/*@{*/
#define HW_FLEXIO_SHIFTBUFn_COUNT (4U)

#define HW_FLEXIO_SHIFTBUFn_ADDR(x, n) ((x) + 0x200U + (0x4U * (n)))

#define HW_FLEXIO_SHIFTBUFn(x, n) (*(__IO hw_flexio_shiftbufn_t *) HW_FLEXIO_SHIFTBUFn_ADDR(x, n))
#define HW_FLEXIO_SHIFTBUFn_RD(x, n) (HW_FLEXIO_SHIFTBUFn(x, n).U)
#define HW_FLEXIO_SHIFTBUFn_WR(x, n, v) (HW_FLEXIO_SHIFTBUFn(x, n).U = (v))
#define HW_FLEXIO_SHIFTBUFn_SET(x, n, v) (BME_OR32(HW_FLEXIO_SHIFTBUFn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTBUFn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_SHIFTBUFn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTBUFn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_SHIFTBUFn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTBUFn bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTBUFn, field SHIFTBUF[31:0] (RW)
 *
 * Shift buffer data is used for a variety of functions depending on the SMOD
 * setting: For SMOD=Receive, Shifter data is transferred into SHIFTBUF at the
 * expiration of Timer. For SMOD=Transmit, SHIFTBUF data is transferred into the
 * Shifter before the Timer begins. For SMOD=Match Store/Continuous, SHIFTBUF[31:16]
 * contains the data to be matched with the Shifter contents. The Match is
 * checked either continuosly (Match Continous mode) or when the Timer expires (Match
 * Store mode). SHIFTBUF[15:0] can be used to mask the match result (1=mask, 0=no
 * mask). In Match Store mode, Shifter data [31:16] is written to SHIFTBUF[31:16]
 * whenever a match event occurs.
 */
/*@{*/
#define BP_FLEXIO_SHIFTBUFn_SHIFTBUF (0U)  /*!< Bit position for FLEXIO_SHIFTBUFn_SHIFTBUF. */
#define BM_FLEXIO_SHIFTBUFn_SHIFTBUF (0xFFFFFFFFU) /*!< Bit mask for FLEXIO_SHIFTBUFn_SHIFTBUF. */
#define BS_FLEXIO_SHIFTBUFn_SHIFTBUF (32U) /*!< Bit field size in bits for FLEXIO_SHIFTBUFn_SHIFTBUF. */

/*! @brief Read current value of the FLEXIO_SHIFTBUFn_SHIFTBUF field. */
#define BR_FLEXIO_SHIFTBUFn_SHIFTBUF(x, n) (HW_FLEXIO_SHIFTBUFn(x, n).U)

/*! @brief Format value for bitfield FLEXIO_SHIFTBUFn_SHIFTBUF. */
#define BF_FLEXIO_SHIFTBUFn_SHIFTBUF(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTBUFn_SHIFTBUF) & BM_FLEXIO_SHIFTBUFn_SHIFTBUF)

/*! @brief Set the SHIFTBUF field to a new value. */
#define BW_FLEXIO_SHIFTBUFn_SHIFTBUF(x, n, v) (HW_FLEXIO_SHIFTBUFn_WR(x, n, v))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTBUFBBSn - Shifter Buffer N Bit Byte Swapped Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTBUFBBSn - Shifter Buffer N Bit Byte Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftbufbbsn
{
    uint32_t U;
    struct _hw_flexio_shiftbufbbsn_bitfields
    {
        uint32_t SHIFTBUFBBS : 32;     /*!< [31:0] Shift Buffer */
    } B;
} hw_flexio_shiftbufbbsn_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFBBSn register
 */
/*@{*/
#define HW_FLEXIO_SHIFTBUFBBSn_COUNT (4U)

#define HW_FLEXIO_SHIFTBUFBBSn_ADDR(x, n) ((x) + 0x280U + (0x4U * (n)))

#define HW_FLEXIO_SHIFTBUFBBSn(x, n) (*(__IO hw_flexio_shiftbufbbsn_t *) HW_FLEXIO_SHIFTBUFBBSn_ADDR(x, n))
#define HW_FLEXIO_SHIFTBUFBBSn_RD(x, n) (HW_FLEXIO_SHIFTBUFBBSn(x, n).U)
#define HW_FLEXIO_SHIFTBUFBBSn_WR(x, n, v) (HW_FLEXIO_SHIFTBUFBBSn(x, n).U = (v))
#define HW_FLEXIO_SHIFTBUFBBSn_SET(x, n, v) (BME_OR32(HW_FLEXIO_SHIFTBUFBBSn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTBUFBBSn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_SHIFTBUFBBSn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTBUFBBSn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_SHIFTBUFBBSn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTBUFBBSn bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTBUFBBSn, field SHIFTBUFBBS[31:0] (RW)
 *
 * Alias to SHIFTBUF register, except reads/writes to this register are bit
 * swapped within each byte. Reads return { SHIFTBUF[24:31], SHIFTBUF[16:23],
 * SHIFTBUF[8:15], SHIFTBUF[0:7] }.
 */
/*@{*/
#define BP_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS (0U) /*!< Bit position for FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS. */
#define BM_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS (0xFFFFFFFFU) /*!< Bit mask for FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS. */
#define BS_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS (32U) /*!< Bit field size in bits for FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS. */

/*! @brief Read current value of the FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS field. */
#define BR_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS(x, n) (HW_FLEXIO_SHIFTBUFBBSn(x, n).U)

/*! @brief Format value for bitfield FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS. */
#define BF_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS) & BM_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS)

/*! @brief Set the SHIFTBUFBBS field to a new value. */
#define BW_FLEXIO_SHIFTBUFBBSn_SHIFTBUFBBS(x, n, v) (HW_FLEXIO_SHIFTBUFBBSn_WR(x, n, v))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTBUFBYSn - Shifter Buffer N Byte Swapped Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTBUFBYSn - Shifter Buffer N Byte Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftbufbysn
{
    uint32_t U;
    struct _hw_flexio_shiftbufbysn_bitfields
    {
        uint32_t SHIFTBUFBYS : 32;     /*!< [31:0] Shift Buffer */
    } B;
} hw_flexio_shiftbufbysn_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFBYSn register
 */
/*@{*/
#define HW_FLEXIO_SHIFTBUFBYSn_COUNT (4U)

#define HW_FLEXIO_SHIFTBUFBYSn_ADDR(x, n) ((x) + 0x300U + (0x4U * (n)))

#define HW_FLEXIO_SHIFTBUFBYSn(x, n) (*(__IO hw_flexio_shiftbufbysn_t *) HW_FLEXIO_SHIFTBUFBYSn_ADDR(x, n))
#define HW_FLEXIO_SHIFTBUFBYSn_RD(x, n) (HW_FLEXIO_SHIFTBUFBYSn(x, n).U)
#define HW_FLEXIO_SHIFTBUFBYSn_WR(x, n, v) (HW_FLEXIO_SHIFTBUFBYSn(x, n).U = (v))
#define HW_FLEXIO_SHIFTBUFBYSn_SET(x, n, v) (BME_OR32(HW_FLEXIO_SHIFTBUFBYSn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTBUFBYSn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_SHIFTBUFBYSn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTBUFBYSn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_SHIFTBUFBYSn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTBUFBYSn bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTBUFBYSn, field SHIFTBUFBYS[31:0] (RW)
 *
 * Alias to SHIFTBUF register, except reads/writes to this register are byte
 * swapped. Reads return { SHIFTBUF[7:0], SHIFTBUF[15:8], SHIFTBUF[23:16],
 * SHIFTBUF[31:24] }.
 */
/*@{*/
#define BP_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS (0U) /*!< Bit position for FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS. */
#define BM_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS (0xFFFFFFFFU) /*!< Bit mask for FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS. */
#define BS_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS (32U) /*!< Bit field size in bits for FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS. */

/*! @brief Read current value of the FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS field. */
#define BR_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS(x, n) (HW_FLEXIO_SHIFTBUFBYSn(x, n).U)

/*! @brief Format value for bitfield FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS. */
#define BF_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS) & BM_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS)

/*! @brief Set the SHIFTBUFBYS field to a new value. */
#define BW_FLEXIO_SHIFTBUFBYSn_SHIFTBUFBYS(x, n, v) (HW_FLEXIO_SHIFTBUFBYSn_WR(x, n, v))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_SHIFTBUFBISn - Shifter Buffer N Bit Swapped Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_SHIFTBUFBISn - Shifter Buffer N Bit Swapped Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_shiftbufbisn
{
    uint32_t U;
    struct _hw_flexio_shiftbufbisn_bitfields
    {
        uint32_t SHIFTBUFBIS : 32;     /*!< [31:0] Shift Buffer */
    } B;
} hw_flexio_shiftbufbisn_t;

/*!
 * @name Constants and macros for entire FLEXIO_SHIFTBUFBISn register
 */
/*@{*/
#define HW_FLEXIO_SHIFTBUFBISn_COUNT (4U)

#define HW_FLEXIO_SHIFTBUFBISn_ADDR(x, n) ((x) + 0x380U + (0x4U * (n)))

#define HW_FLEXIO_SHIFTBUFBISn(x, n) (*(__IO hw_flexio_shiftbufbisn_t *) HW_FLEXIO_SHIFTBUFBISn_ADDR(x, n))
#define HW_FLEXIO_SHIFTBUFBISn_RD(x, n) (HW_FLEXIO_SHIFTBUFBISn(x, n).U)
#define HW_FLEXIO_SHIFTBUFBISn_WR(x, n, v) (HW_FLEXIO_SHIFTBUFBISn(x, n).U = (v))
#define HW_FLEXIO_SHIFTBUFBISn_SET(x, n, v) (BME_OR32(HW_FLEXIO_SHIFTBUFBISn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_SHIFTBUFBISn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_SHIFTBUFBISn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_SHIFTBUFBISn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_SHIFTBUFBISn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_SHIFTBUFBISn bitfields
 */

/*!
 * @name Register FLEXIO_SHIFTBUFBISn, field SHIFTBUFBIS[31:0] (RW)
 *
 * Alias to SHIFTBUF register, except reads/writes to this register are bit
 * swapped. Reads return SHIFTBUF[0:31].
 */
/*@{*/
#define BP_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS (0U) /*!< Bit position for FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS. */
#define BM_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS (0xFFFFFFFFU) /*!< Bit mask for FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS. */
#define BS_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS (32U) /*!< Bit field size in bits for FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS. */

/*! @brief Read current value of the FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS field. */
#define BR_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS(x, n) (HW_FLEXIO_SHIFTBUFBISn(x, n).U)

/*! @brief Format value for bitfield FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS. */
#define BF_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS) & BM_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS)

/*! @brief Set the SHIFTBUFBIS field to a new value. */
#define BW_FLEXIO_SHIFTBUFBISn_SHIFTBUFBIS(x, n, v) (HW_FLEXIO_SHIFTBUFBISn_WR(x, n, v))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_TIMCTLn - Timer Control N Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_TIMCTLn - Timer Control N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_timctln
{
    uint32_t U;
    struct _hw_flexio_timctln_bitfields
    {
        uint32_t TIMOD : 2;            /*!< [1:0] Timer Mode */
        uint32_t RESERVED0 : 5;        /*!< [6:2]  */
        uint32_t PINPOL : 1;           /*!< [7] Timer Pin Polarity */
        uint32_t PINSEL : 3;           /*!< [10:8] Timer Pin Select */
        uint32_t RESERVED1 : 5;        /*!< [15:11]  */
        uint32_t PINCFG : 2;           /*!< [17:16] Timer Pin Configuration */
        uint32_t RESERVED2 : 4;        /*!< [21:18]  */
        uint32_t TRGSRC : 1;           /*!< [22] Trigger Source */
        uint32_t TRGPOL : 1;           /*!< [23] Trigger Polarity */
        uint32_t TRGSEL : 4;           /*!< [27:24] Trigger Select */
        uint32_t RESERVED3 : 4;        /*!< [31:28]  */
    } B;
} hw_flexio_timctln_t;

/*!
 * @name Constants and macros for entire FLEXIO_TIMCTLn register
 */
/*@{*/
#define HW_FLEXIO_TIMCTLn_COUNT (4U)

#define HW_FLEXIO_TIMCTLn_ADDR(x, n) ((x) + 0x400U + (0x4U * (n)))

#define HW_FLEXIO_TIMCTLn(x, n)  (*(__IO hw_flexio_timctln_t *) HW_FLEXIO_TIMCTLn_ADDR(x, n))
#define HW_FLEXIO_TIMCTLn_RD(x, n) (HW_FLEXIO_TIMCTLn(x, n).U)
#define HW_FLEXIO_TIMCTLn_WR(x, n, v) (HW_FLEXIO_TIMCTLn(x, n).U = (v))
#define HW_FLEXIO_TIMCTLn_SET(x, n, v) (BME_OR32(HW_FLEXIO_TIMCTLn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_TIMCTLn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_TIMCTLn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_TIMCTLn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_TIMCTLn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMCTLn bitfields
 */

/*!
 * @name Register FLEXIO_TIMCTLn, field TIMOD[1:0] (RW)
 *
 * In 8-bit counter mode, the lower 8-bits of the counter and compare register
 * are used to configure the baud rate of the timer shift clock and the upper
 * 8-bits are used to configure the shifter bit count. In 8-bit PWM mode, the lower
 * 8-bits of the counter and compare register are used to configure the high
 * period of the timer shift clock and the upper 8-bits are used to configure the low
 * period of the timer shift clock. The shifter bit count is configured using
 * another timer or external signal. In 16-bit counter mode, the full 16-bits of the
 * counter and compare register are used to configure either the baud rate of
 * the shift clock or the shifter bit count.
 *
 * Values:
 * - 00 - Timer Disabled.
 * - 01 - Dual 8-bit counters baud/bit mode.
 * - 10 - Dual 8-bit counters PWM mode.
 * - 11 - Single 16-bit counter mode.
 */
/*@{*/
#define BP_FLEXIO_TIMCTLn_TIMOD (0U)       /*!< Bit position for FLEXIO_TIMCTLn_TIMOD. */
#define BM_FLEXIO_TIMCTLn_TIMOD (0x00000003U) /*!< Bit mask for FLEXIO_TIMCTLn_TIMOD. */
#define BS_FLEXIO_TIMCTLn_TIMOD (2U)       /*!< Bit field size in bits for FLEXIO_TIMCTLn_TIMOD. */

/*! @brief Read current value of the FLEXIO_TIMCTLn_TIMOD field. */
#define BR_FLEXIO_TIMCTLn_TIMOD(x, n) (BME_UBFX32(HW_FLEXIO_TIMCTLn_ADDR(x, n), BP_FLEXIO_TIMCTLn_TIMOD, BS_FLEXIO_TIMCTLn_TIMOD))

/*! @brief Format value for bitfield FLEXIO_TIMCTLn_TIMOD. */
#define BF_FLEXIO_TIMCTLn_TIMOD(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TIMOD) & BM_FLEXIO_TIMCTLn_TIMOD)

/*! @brief Set the TIMOD field to a new value. */
#define BW_FLEXIO_TIMCTLn_TIMOD(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TIMOD), BP_FLEXIO_TIMCTLn_TIMOD, 2))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTLn, field PINPOL[7] (RW)
 *
 * Values:
 * - 0 - Pin is active high
 * - 1 - Pin is active low
 */
/*@{*/
#define BP_FLEXIO_TIMCTLn_PINPOL (7U)      /*!< Bit position for FLEXIO_TIMCTLn_PINPOL. */
#define BM_FLEXIO_TIMCTLn_PINPOL (0x00000080U) /*!< Bit mask for FLEXIO_TIMCTLn_PINPOL. */
#define BS_FLEXIO_TIMCTLn_PINPOL (1U)      /*!< Bit field size in bits for FLEXIO_TIMCTLn_PINPOL. */

/*! @brief Read current value of the FLEXIO_TIMCTLn_PINPOL field. */
#define BR_FLEXIO_TIMCTLn_PINPOL(x, n) (BME_UBFX32(HW_FLEXIO_TIMCTLn_ADDR(x, n), BP_FLEXIO_TIMCTLn_PINPOL, BS_FLEXIO_TIMCTLn_PINPOL))

/*! @brief Format value for bitfield FLEXIO_TIMCTLn_PINPOL. */
#define BF_FLEXIO_TIMCTLn_PINPOL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCTLn_PINPOL) & BM_FLEXIO_TIMCTLn_PINPOL)

/*! @brief Set the PINPOL field to a new value. */
#define BW_FLEXIO_TIMCTLn_PINPOL(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCTLn_PINPOL), BP_FLEXIO_TIMCTLn_PINPOL, 1))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTLn, field PINSEL[10:8] (RW)
 *
 * Selects which pin is used by the Timer input or output.
 */
/*@{*/
#define BP_FLEXIO_TIMCTLn_PINSEL (8U)      /*!< Bit position for FLEXIO_TIMCTLn_PINSEL. */
#define BM_FLEXIO_TIMCTLn_PINSEL (0x00000700U) /*!< Bit mask for FLEXIO_TIMCTLn_PINSEL. */
#define BS_FLEXIO_TIMCTLn_PINSEL (3U)      /*!< Bit field size in bits for FLEXIO_TIMCTLn_PINSEL. */

/*! @brief Read current value of the FLEXIO_TIMCTLn_PINSEL field. */
#define BR_FLEXIO_TIMCTLn_PINSEL(x, n) (BME_UBFX32(HW_FLEXIO_TIMCTLn_ADDR(x, n), BP_FLEXIO_TIMCTLn_PINSEL, BS_FLEXIO_TIMCTLn_PINSEL))

/*! @brief Format value for bitfield FLEXIO_TIMCTLn_PINSEL. */
#define BF_FLEXIO_TIMCTLn_PINSEL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCTLn_PINSEL) & BM_FLEXIO_TIMCTLn_PINSEL)

/*! @brief Set the PINSEL field to a new value. */
#define BW_FLEXIO_TIMCTLn_PINSEL(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCTLn_PINSEL), BP_FLEXIO_TIMCTLn_PINSEL, 3))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTLn, field PINCFG[17:16] (RW)
 *
 * Values:
 * - 00 - Timer pin output disabled
 * - 01 - Timer pin open drain or bidirectional output enable
 * - 10 - Timer pin bidirectional output data
 * - 11 - Timer pin output
 */
/*@{*/
#define BP_FLEXIO_TIMCTLn_PINCFG (16U)     /*!< Bit position for FLEXIO_TIMCTLn_PINCFG. */
#define BM_FLEXIO_TIMCTLn_PINCFG (0x00030000U) /*!< Bit mask for FLEXIO_TIMCTLn_PINCFG. */
#define BS_FLEXIO_TIMCTLn_PINCFG (2U)      /*!< Bit field size in bits for FLEXIO_TIMCTLn_PINCFG. */

/*! @brief Read current value of the FLEXIO_TIMCTLn_PINCFG field. */
#define BR_FLEXIO_TIMCTLn_PINCFG(x, n) (BME_UBFX32(HW_FLEXIO_TIMCTLn_ADDR(x, n), BP_FLEXIO_TIMCTLn_PINCFG, BS_FLEXIO_TIMCTLn_PINCFG))

/*! @brief Format value for bitfield FLEXIO_TIMCTLn_PINCFG. */
#define BF_FLEXIO_TIMCTLn_PINCFG(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCTLn_PINCFG) & BM_FLEXIO_TIMCTLn_PINCFG)

/*! @brief Set the PINCFG field to a new value. */
#define BW_FLEXIO_TIMCTLn_PINCFG(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCTLn_PINCFG), BP_FLEXIO_TIMCTLn_PINCFG, 2))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTLn, field TRGSRC[22] (RW)
 *
 * Values:
 * - 0 - External trigger selected
 * - 1 - Internal trigger selected
 */
/*@{*/
#define BP_FLEXIO_TIMCTLn_TRGSRC (22U)     /*!< Bit position for FLEXIO_TIMCTLn_TRGSRC. */
#define BM_FLEXIO_TIMCTLn_TRGSRC (0x00400000U) /*!< Bit mask for FLEXIO_TIMCTLn_TRGSRC. */
#define BS_FLEXIO_TIMCTLn_TRGSRC (1U)      /*!< Bit field size in bits for FLEXIO_TIMCTLn_TRGSRC. */

/*! @brief Read current value of the FLEXIO_TIMCTLn_TRGSRC field. */
#define BR_FLEXIO_TIMCTLn_TRGSRC(x, n) (BME_UBFX32(HW_FLEXIO_TIMCTLn_ADDR(x, n), BP_FLEXIO_TIMCTLn_TRGSRC, BS_FLEXIO_TIMCTLn_TRGSRC))

/*! @brief Format value for bitfield FLEXIO_TIMCTLn_TRGSRC. */
#define BF_FLEXIO_TIMCTLn_TRGSRC(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TRGSRC) & BM_FLEXIO_TIMCTLn_TRGSRC)

/*! @brief Set the TRGSRC field to a new value. */
#define BW_FLEXIO_TIMCTLn_TRGSRC(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TRGSRC), BP_FLEXIO_TIMCTLn_TRGSRC, 1))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTLn, field TRGPOL[23] (RW)
 *
 * Values:
 * - 0 - Trigger active high
 * - 1 - Trigger active low
 */
/*@{*/
#define BP_FLEXIO_TIMCTLn_TRGPOL (23U)     /*!< Bit position for FLEXIO_TIMCTLn_TRGPOL. */
#define BM_FLEXIO_TIMCTLn_TRGPOL (0x00800000U) /*!< Bit mask for FLEXIO_TIMCTLn_TRGPOL. */
#define BS_FLEXIO_TIMCTLn_TRGPOL (1U)      /*!< Bit field size in bits for FLEXIO_TIMCTLn_TRGPOL. */

/*! @brief Read current value of the FLEXIO_TIMCTLn_TRGPOL field. */
#define BR_FLEXIO_TIMCTLn_TRGPOL(x, n) (BME_UBFX32(HW_FLEXIO_TIMCTLn_ADDR(x, n), BP_FLEXIO_TIMCTLn_TRGPOL, BS_FLEXIO_TIMCTLn_TRGPOL))

/*! @brief Format value for bitfield FLEXIO_TIMCTLn_TRGPOL. */
#define BF_FLEXIO_TIMCTLn_TRGPOL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TRGPOL) & BM_FLEXIO_TIMCTLn_TRGPOL)

/*! @brief Set the TRGPOL field to a new value. */
#define BW_FLEXIO_TIMCTLn_TRGPOL(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TRGPOL), BP_FLEXIO_TIMCTLn_TRGPOL, 1))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCTLn, field TRGSEL[27:24] (RW)
 *
 * Refer to the chip configuration section for external trigger selection. The
 * internal trigger selection is configured as follows.
 */
/*@{*/
#define BP_FLEXIO_TIMCTLn_TRGSEL (24U)     /*!< Bit position for FLEXIO_TIMCTLn_TRGSEL. */
#define BM_FLEXIO_TIMCTLn_TRGSEL (0x0F000000U) /*!< Bit mask for FLEXIO_TIMCTLn_TRGSEL. */
#define BS_FLEXIO_TIMCTLn_TRGSEL (4U)      /*!< Bit field size in bits for FLEXIO_TIMCTLn_TRGSEL. */

/*! @brief Read current value of the FLEXIO_TIMCTLn_TRGSEL field. */
#define BR_FLEXIO_TIMCTLn_TRGSEL(x, n) (BME_UBFX32(HW_FLEXIO_TIMCTLn_ADDR(x, n), BP_FLEXIO_TIMCTLn_TRGSEL, BS_FLEXIO_TIMCTLn_TRGSEL))

/*! @brief Format value for bitfield FLEXIO_TIMCTLn_TRGSEL. */
#define BF_FLEXIO_TIMCTLn_TRGSEL(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TRGSEL) & BM_FLEXIO_TIMCTLn_TRGSEL)

/*! @brief Set the TRGSEL field to a new value. */
#define BW_FLEXIO_TIMCTLn_TRGSEL(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCTLn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCTLn_TRGSEL), BP_FLEXIO_TIMCTLn_TRGSEL, 4))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_TIMCFGn - Timer Configuration N Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_TIMCFGn - Timer Configuration N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * The options to enable or disable the timer using the Timer N-1 enable or
 * disable are reserved when N is evenly divisible by 4 (eg: Timer 0).
 */
typedef union _hw_flexio_timcfgn
{
    uint32_t U;
    struct _hw_flexio_timcfgn_bitfields
    {
        uint32_t RESERVED0 : 1;        /*!< [0]  */
        uint32_t TSTART : 1;           /*!< [1] Timer Start Bit */
        uint32_t RESERVED1 : 2;        /*!< [3:2]  */
        uint32_t TSTOP : 2;            /*!< [5:4] Timer Stop Bit */
        uint32_t RESERVED2 : 2;        /*!< [7:6]  */
        uint32_t TIMENA : 3;           /*!< [10:8] Timer Enable */
        uint32_t RESERVED3 : 1;        /*!< [11]  */
        uint32_t TIMDIS : 3;           /*!< [14:12] Timer Disable */
        uint32_t RESERVED4 : 1;        /*!< [15]  */
        uint32_t TIMRST : 3;           /*!< [18:16] Timer Reset */
        uint32_t RESERVED5 : 1;        /*!< [19]  */
        uint32_t TIMDEC : 2;           /*!< [21:20] Timer Decrement */
        uint32_t RESERVED6 : 2;        /*!< [23:22]  */
        uint32_t TIMOUT : 2;           /*!< [25:24] Timer Output */
        uint32_t RESERVED7 : 6;        /*!< [31:26]  */
    } B;
} hw_flexio_timcfgn_t;

/*!
 * @name Constants and macros for entire FLEXIO_TIMCFGn register
 */
/*@{*/
#define HW_FLEXIO_TIMCFGn_COUNT (4U)

#define HW_FLEXIO_TIMCFGn_ADDR(x, n) ((x) + 0x480U + (0x4U * (n)))

#define HW_FLEXIO_TIMCFGn(x, n)  (*(__IO hw_flexio_timcfgn_t *) HW_FLEXIO_TIMCFGn_ADDR(x, n))
#define HW_FLEXIO_TIMCFGn_RD(x, n) (HW_FLEXIO_TIMCFGn(x, n).U)
#define HW_FLEXIO_TIMCFGn_WR(x, n, v) (HW_FLEXIO_TIMCFGn(x, n).U = (v))
#define HW_FLEXIO_TIMCFGn_SET(x, n, v) (BME_OR32(HW_FLEXIO_TIMCFGn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_TIMCFGn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_TIMCFGn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_TIMCFGn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_TIMCFGn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMCFGn bitfields
 */

/*!
 * @name Register FLEXIO_TIMCFGn, field TSTART[1] (RW)
 *
 * When start bit is enabled, configured shifters will output the contents of
 * the start bit when the timer is enabled and the timer counter will reload from
 * the compare register on the first rising edge of the shift clock.
 *
 * Values:
 * - 0 - Start bit disabled
 * - 1 - Start bit enabled
 */
/*@{*/
#define BP_FLEXIO_TIMCFGn_TSTART (1U)      /*!< Bit position for FLEXIO_TIMCFGn_TSTART. */
#define BM_FLEXIO_TIMCFGn_TSTART (0x00000002U) /*!< Bit mask for FLEXIO_TIMCFGn_TSTART. */
#define BS_FLEXIO_TIMCFGn_TSTART (1U)      /*!< Bit field size in bits for FLEXIO_TIMCFGn_TSTART. */

/*! @brief Read current value of the FLEXIO_TIMCFGn_TSTART field. */
#define BR_FLEXIO_TIMCFGn_TSTART(x, n) (BME_UBFX32(HW_FLEXIO_TIMCFGn_ADDR(x, n), BP_FLEXIO_TIMCFGn_TSTART, BS_FLEXIO_TIMCFGn_TSTART))

/*! @brief Format value for bitfield FLEXIO_TIMCFGn_TSTART. */
#define BF_FLEXIO_TIMCFGn_TSTART(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TSTART) & BM_FLEXIO_TIMCFGn_TSTART)

/*! @brief Set the TSTART field to a new value. */
#define BW_FLEXIO_TIMCFGn_TSTART(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TSTART), BP_FLEXIO_TIMCFGn_TSTART, 1))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFGn, field TSTOP[5:4] (RW)
 *
 * The stop bit can be added on a timer compare (between each word) or on a
 * timer disable. When stop bit is enabled, configured shifters will output the
 * contents of the stop bit when the timer is disabled. When stop bit is enabled on
 * timer disable, the timer remains disabled until the next rising edge of the
 * shift clock. If configured for both timer compare and timer disable, only one stop
 * bit is inserted on timer disable.
 *
 * Values:
 * - 00 - Stop bit disabled
 * - 01 - Stop bit is enabled on timer compare
 * - 10 - Stop bit is enabled on timer disable
 * - 11 - Stop bit is enabled on timer compare and timer disable
 */
/*@{*/
#define BP_FLEXIO_TIMCFGn_TSTOP (4U)       /*!< Bit position for FLEXIO_TIMCFGn_TSTOP. */
#define BM_FLEXIO_TIMCFGn_TSTOP (0x00000030U) /*!< Bit mask for FLEXIO_TIMCFGn_TSTOP. */
#define BS_FLEXIO_TIMCFGn_TSTOP (2U)       /*!< Bit field size in bits for FLEXIO_TIMCFGn_TSTOP. */

/*! @brief Read current value of the FLEXIO_TIMCFGn_TSTOP field. */
#define BR_FLEXIO_TIMCFGn_TSTOP(x, n) (BME_UBFX32(HW_FLEXIO_TIMCFGn_ADDR(x, n), BP_FLEXIO_TIMCFGn_TSTOP, BS_FLEXIO_TIMCFGn_TSTOP))

/*! @brief Format value for bitfield FLEXIO_TIMCFGn_TSTOP. */
#define BF_FLEXIO_TIMCFGn_TSTOP(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TSTOP) & BM_FLEXIO_TIMCFGn_TSTOP)

/*! @brief Set the TSTOP field to a new value. */
#define BW_FLEXIO_TIMCFGn_TSTOP(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TSTOP), BP_FLEXIO_TIMCFGn_TSTOP, 2))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFGn, field TIMENA[10:8] (RW)
 *
 * Configures the condition that causes the Timer to be enabled and start
 * decrementing.
 *
 * Values:
 * - 000 - Timer always enabled
 * - 001 - Timer enabled on Timer N-1 enable
 * - 010 - Timer enabled on Trigger high
 * - 011 - Timer enabled on Trigger high and Pin high
 * - 100 - Timer enabled on Pin rising edge
 * - 101 - Timer enabled on Pin rising edge and Trigger high
 * - 110 - Timer enabled on Trigger rising edge
 * - 111 - Timer enabled on Trigger rising or falling edge
 */
/*@{*/
#define BP_FLEXIO_TIMCFGn_TIMENA (8U)      /*!< Bit position for FLEXIO_TIMCFGn_TIMENA. */
#define BM_FLEXIO_TIMCFGn_TIMENA (0x00000700U) /*!< Bit mask for FLEXIO_TIMCFGn_TIMENA. */
#define BS_FLEXIO_TIMCFGn_TIMENA (3U)      /*!< Bit field size in bits for FLEXIO_TIMCFGn_TIMENA. */

/*! @brief Read current value of the FLEXIO_TIMCFGn_TIMENA field. */
#define BR_FLEXIO_TIMCFGn_TIMENA(x, n) (BME_UBFX32(HW_FLEXIO_TIMCFGn_ADDR(x, n), BP_FLEXIO_TIMCFGn_TIMENA, BS_FLEXIO_TIMCFGn_TIMENA))

/*! @brief Format value for bitfield FLEXIO_TIMCFGn_TIMENA. */
#define BF_FLEXIO_TIMCFGn_TIMENA(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMENA) & BM_FLEXIO_TIMCFGn_TIMENA)

/*! @brief Set the TIMENA field to a new value. */
#define BW_FLEXIO_TIMCFGn_TIMENA(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMENA), BP_FLEXIO_TIMCFGn_TIMENA, 3))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFGn, field TIMDIS[14:12] (RW)
 *
 * Configures the condition that causes the Timer to be disabled and stop
 * decrementing.
 *
 * Values:
 * - 000 - Timer never disabled
 * - 001 - Timer disabled on Timer N-1 disable
 * - 010 - Timer disabled on Timer compare
 * - 011 - Timer disabled on Timer compare and Trigger Low
 * - 100 - Timer disabled on Pin rising or falling edge
 * - 101 - Timer disabled on Pin rising or falling edge provided Trigger is high
 * - 110 - Timer disabled on Trigger falling edge
 * - 111 - Reserved
 */
/*@{*/
#define BP_FLEXIO_TIMCFGn_TIMDIS (12U)     /*!< Bit position for FLEXIO_TIMCFGn_TIMDIS. */
#define BM_FLEXIO_TIMCFGn_TIMDIS (0x00007000U) /*!< Bit mask for FLEXIO_TIMCFGn_TIMDIS. */
#define BS_FLEXIO_TIMCFGn_TIMDIS (3U)      /*!< Bit field size in bits for FLEXIO_TIMCFGn_TIMDIS. */

/*! @brief Read current value of the FLEXIO_TIMCFGn_TIMDIS field. */
#define BR_FLEXIO_TIMCFGn_TIMDIS(x, n) (BME_UBFX32(HW_FLEXIO_TIMCFGn_ADDR(x, n), BP_FLEXIO_TIMCFGn_TIMDIS, BS_FLEXIO_TIMCFGn_TIMDIS))

/*! @brief Format value for bitfield FLEXIO_TIMCFGn_TIMDIS. */
#define BF_FLEXIO_TIMCFGn_TIMDIS(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMDIS) & BM_FLEXIO_TIMCFGn_TIMDIS)

/*! @brief Set the TIMDIS field to a new value. */
#define BW_FLEXIO_TIMCFGn_TIMDIS(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMDIS), BP_FLEXIO_TIMCFGn_TIMDIS, 3))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFGn, field TIMRST[18:16] (RW)
 *
 * Configures the condition that causes the timer counter (and optionally the
 * timer output) to be reset. In 8-bit counter mode, the timer reset will only
 * reset the lower 8-bits that configure the baud rate. In all other modes, the timer
 * reset will reset the full 16-bits of the counter.
 *
 * Values:
 * - 000 - Timer never reset
 * - 001 - Reserved
 * - 010 - Timer reset on Timer Pin equal to Timer Output
 * - 011 - Timer reset on Timer Trigger equal to Timer Output
 * - 100 - Timer reset on Timer Pin rising edge
 * - 101 - Reserved
 * - 110 - Timer reset on Trigger rising edge
 * - 111 - Timer reset on Trigger rising or falling edge
 */
/*@{*/
#define BP_FLEXIO_TIMCFGn_TIMRST (16U)     /*!< Bit position for FLEXIO_TIMCFGn_TIMRST. */
#define BM_FLEXIO_TIMCFGn_TIMRST (0x00070000U) /*!< Bit mask for FLEXIO_TIMCFGn_TIMRST. */
#define BS_FLEXIO_TIMCFGn_TIMRST (3U)      /*!< Bit field size in bits for FLEXIO_TIMCFGn_TIMRST. */

/*! @brief Read current value of the FLEXIO_TIMCFGn_TIMRST field. */
#define BR_FLEXIO_TIMCFGn_TIMRST(x, n) (BME_UBFX32(HW_FLEXIO_TIMCFGn_ADDR(x, n), BP_FLEXIO_TIMCFGn_TIMRST, BS_FLEXIO_TIMCFGn_TIMRST))

/*! @brief Format value for bitfield FLEXIO_TIMCFGn_TIMRST. */
#define BF_FLEXIO_TIMCFGn_TIMRST(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMRST) & BM_FLEXIO_TIMCFGn_TIMRST)

/*! @brief Set the TIMRST field to a new value. */
#define BW_FLEXIO_TIMCFGn_TIMRST(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMRST), BP_FLEXIO_TIMCFGn_TIMRST, 3))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFGn, field TIMDEC[21:20] (RW)
 *
 * Configures the source of the Timer decrement and the source of the Shift
 * clock.
 *
 * Values:
 * - 00 - Decrement counter on FlexIO clock, Shift clock equals Timer output.
 * - 01 - Decrement counter on Trigger input (both edges), Shift clock equals
 *     Timer output.
 * - 10 - Decrement counter on Pin input (both edges), Shift clock equals Pin
 *     input.
 * - 11 - Decrement counter on Trigger input (both edges), Shift clock equals
 *     Trigger input.
 */
/*@{*/
#define BP_FLEXIO_TIMCFGn_TIMDEC (20U)     /*!< Bit position for FLEXIO_TIMCFGn_TIMDEC. */
#define BM_FLEXIO_TIMCFGn_TIMDEC (0x00300000U) /*!< Bit mask for FLEXIO_TIMCFGn_TIMDEC. */
#define BS_FLEXIO_TIMCFGn_TIMDEC (2U)      /*!< Bit field size in bits for FLEXIO_TIMCFGn_TIMDEC. */

/*! @brief Read current value of the FLEXIO_TIMCFGn_TIMDEC field. */
#define BR_FLEXIO_TIMCFGn_TIMDEC(x, n) (BME_UBFX32(HW_FLEXIO_TIMCFGn_ADDR(x, n), BP_FLEXIO_TIMCFGn_TIMDEC, BS_FLEXIO_TIMCFGn_TIMDEC))

/*! @brief Format value for bitfield FLEXIO_TIMCFGn_TIMDEC. */
#define BF_FLEXIO_TIMCFGn_TIMDEC(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMDEC) & BM_FLEXIO_TIMCFGn_TIMDEC)

/*! @brief Set the TIMDEC field to a new value. */
#define BW_FLEXIO_TIMCFGn_TIMDEC(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMDEC), BP_FLEXIO_TIMCFGn_TIMDEC, 2))
/*@}*/

/*!
 * @name Register FLEXIO_TIMCFGn, field TIMOUT[25:24] (RW)
 *
 * Configures the initial state of the Timer Output and whether it is affected
 * by the Timer reset.
 *
 * Values:
 * - 00 - Timer output is logic one when enabled and is not affected by timer
 *     reset
 * - 01 - Timer output is logic zero when enabled and is not affected by timer
 *     reset
 * - 10 - Timer output is logic one when enabled and on timer reset
 * - 11 - Timer output is logic zero when enabled and on timer reset
 */
/*@{*/
#define BP_FLEXIO_TIMCFGn_TIMOUT (24U)     /*!< Bit position for FLEXIO_TIMCFGn_TIMOUT. */
#define BM_FLEXIO_TIMCFGn_TIMOUT (0x03000000U) /*!< Bit mask for FLEXIO_TIMCFGn_TIMOUT. */
#define BS_FLEXIO_TIMCFGn_TIMOUT (2U)      /*!< Bit field size in bits for FLEXIO_TIMCFGn_TIMOUT. */

/*! @brief Read current value of the FLEXIO_TIMCFGn_TIMOUT field. */
#define BR_FLEXIO_TIMCFGn_TIMOUT(x, n) (BME_UBFX32(HW_FLEXIO_TIMCFGn_ADDR(x, n), BP_FLEXIO_TIMCFGn_TIMOUT, BS_FLEXIO_TIMCFGn_TIMOUT))

/*! @brief Format value for bitfield FLEXIO_TIMCFGn_TIMOUT. */
#define BF_FLEXIO_TIMCFGn_TIMOUT(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMOUT) & BM_FLEXIO_TIMCFGn_TIMOUT)

/*! @brief Set the TIMOUT field to a new value. */
#define BW_FLEXIO_TIMCFGn_TIMOUT(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCFGn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCFGn_TIMOUT), BP_FLEXIO_TIMCFGn_TIMOUT, 2))
/*@}*/

/*******************************************************************************
 * HW_FLEXIO_TIMCMPn - Timer Compare N Register
 ******************************************************************************/

/*!
 * @brief HW_FLEXIO_TIMCMPn - Timer Compare N Register (RW)
 *
 * Reset value: 0x00000000U
 *
 * .
 */
typedef union _hw_flexio_timcmpn
{
    uint32_t U;
    struct _hw_flexio_timcmpn_bitfields
    {
        uint32_t CMP : 16;             /*!< [15:0] Timer Compare Value */
        uint32_t RESERVED0 : 16;       /*!< [31:16]  */
    } B;
} hw_flexio_timcmpn_t;

/*!
 * @name Constants and macros for entire FLEXIO_TIMCMPn register
 */
/*@{*/
#define HW_FLEXIO_TIMCMPn_COUNT (4U)

#define HW_FLEXIO_TIMCMPn_ADDR(x, n) ((x) + 0x500U + (0x4U * (n)))

#define HW_FLEXIO_TIMCMPn(x, n)  (*(__IO hw_flexio_timcmpn_t *) HW_FLEXIO_TIMCMPn_ADDR(x, n))
#define HW_FLEXIO_TIMCMPn_RD(x, n) (HW_FLEXIO_TIMCMPn(x, n).U)
#define HW_FLEXIO_TIMCMPn_WR(x, n, v) (HW_FLEXIO_TIMCMPn(x, n).U = (v))
#define HW_FLEXIO_TIMCMPn_SET(x, n, v) (BME_OR32(HW_FLEXIO_TIMCMPn_ADDR(x, n), (uint32_t)(v)))
#define HW_FLEXIO_TIMCMPn_CLR(x, n, v) (BME_AND32(HW_FLEXIO_TIMCMPn_ADDR(x, n), (uint32_t)(~(v))))
#define HW_FLEXIO_TIMCMPn_TOG(x, n, v) (BME_XOR32(HW_FLEXIO_TIMCMPn_ADDR(x, n), (uint32_t)(v)))
/*@}*/

/*
 * Constants & macros for individual FLEXIO_TIMCMPn bitfields
 */

/*!
 * @name Register FLEXIO_TIMCMPn, field CMP[15:0] (RW)
 *
 * The timer compare value is loaded into the timer counter when the timer is
 * first enabled, when the timer is reset and when the timer decrements down to
 * zero. In dual 8-bit counters baud/bit mode, the lower 8-bits configures the baud
 * rate divider equal to (CMP[7:0] + 1) * 2. The upper 8-bits configure the
 * number of bits in each word equal to (CMP[15:8] + 1) / 2. In dual 8-bit counters
 * PWM mode, the lower 8-bits configure the high period of the output to (CMP[7:0]
 * + 1) * 2. The upper 8-bits configure the low period of the output to
 * (CMP[15:8] + 1) * 2. In 16-bit counter mode, the compare value can be used to generate
 * the baud rate divider (if shift clock source is timer output) to equal
 * (CMP[15:0] + 1) * 2. When the shift clock source is a pin or trigger input, the
 * compare register is used to set the number of bits in each word equal to (CMP[15:0]
 * + 1) / 2.
 */
/*@{*/
#define BP_FLEXIO_TIMCMPn_CMP (0U)         /*!< Bit position for FLEXIO_TIMCMPn_CMP. */
#define BM_FLEXIO_TIMCMPn_CMP (0x0000FFFFU) /*!< Bit mask for FLEXIO_TIMCMPn_CMP. */
#define BS_FLEXIO_TIMCMPn_CMP (16U)        /*!< Bit field size in bits for FLEXIO_TIMCMPn_CMP. */

/*! @brief Read current value of the FLEXIO_TIMCMPn_CMP field. */
#define BR_FLEXIO_TIMCMPn_CMP(x, n) (BME_UBFX32(HW_FLEXIO_TIMCMPn_ADDR(x, n), BP_FLEXIO_TIMCMPn_CMP, BS_FLEXIO_TIMCMPn_CMP))

/*! @brief Format value for bitfield FLEXIO_TIMCMPn_CMP. */
#define BF_FLEXIO_TIMCMPn_CMP(v) ((uint32_t)((uint32_t)(v) << BP_FLEXIO_TIMCMPn_CMP) & BM_FLEXIO_TIMCMPn_CMP)

/*! @brief Set the CMP field to a new value. */
#define BW_FLEXIO_TIMCMPn_CMP(x, n, v) (BME_BFI32(HW_FLEXIO_TIMCMPn_ADDR(x, n), ((uint32_t)(v) << BP_FLEXIO_TIMCMPn_CMP), BP_FLEXIO_TIMCMPn_CMP, 16))
/*@}*/

/*******************************************************************************
 * hw_flexio_t - module struct
 ******************************************************************************/
/*!
 * @brief All FLEXIO module registers.
 */
#pragma pack(1)
typedef struct _hw_flexio
{
    __I hw_flexio_verid_t VERID;           /*!< [0x0] Version ID Register */
    __I hw_flexio_param_t PARAM;           /*!< [0x4] Parameter Register */
    __IO hw_flexio_ctrl_t CTRL;            /*!< [0x8] FlexIO Control Register */
    uint8_t _reserved0[4];
    __IO hw_flexio_shiftstat_t SHIFTSTAT;  /*!< [0x10] Shifter Status Register */
    __IO hw_flexio_shifterr_t SHIFTERR;    /*!< [0x14] Shifter Error Register */
    __IO hw_flexio_timstat_t TIMSTAT;      /*!< [0x18] Timer Status Register */
    uint8_t _reserved1[4];
    __IO hw_flexio_shiftsien_t SHIFTSIEN;  /*!< [0x20] Shifter Status Interrupt Enable */
    __IO hw_flexio_shifteien_t SHIFTEIEN;  /*!< [0x24] Shifter Error Interrupt Enable */
    __IO hw_flexio_timien_t TIMIEN;        /*!< [0x28] Timer Interrupt Enable Register */
    uint8_t _reserved2[4];
    __IO hw_flexio_shiftsden_t SHIFTSDEN;  /*!< [0x30] Shifter Status DMA Enable */
    uint8_t _reserved3[76];
    __IO hw_flexio_shiftctln_t SHIFTCTLn[4]; /*!< [0x80] Shifter Control N Register */
    uint8_t _reserved4[112];
    __IO hw_flexio_shiftcfgn_t SHIFTCFGn[4]; /*!< [0x100] Shifter Configuration N Register */
    uint8_t _reserved5[240];
    __IO hw_flexio_shiftbufn_t SHIFTBUFn[4]; /*!< [0x200] Shifter Buffer N Register */
    uint8_t _reserved6[112];
    __IO hw_flexio_shiftbufbbsn_t SHIFTBUFBBSn[4]; /*!< [0x280] Shifter Buffer N Bit Byte Swapped Register */
    uint8_t _reserved7[112];
    __IO hw_flexio_shiftbufbysn_t SHIFTBUFBYSn[4]; /*!< [0x300] Shifter Buffer N Byte Swapped Register */
    uint8_t _reserved8[112];
    __IO hw_flexio_shiftbufbisn_t SHIFTBUFBISn[4]; /*!< [0x380] Shifter Buffer N Bit Swapped Register */
    uint8_t _reserved9[112];
    __IO hw_flexio_timctln_t TIMCTLn[4];   /*!< [0x400] Timer Control N Register */
    uint8_t _reserved10[112];
    __IO hw_flexio_timcfgn_t TIMCFGn[4];   /*!< [0x480] Timer Configuration N Register */
    uint8_t _reserved11[112];
    __IO hw_flexio_timcmpn_t TIMCMPn[4];   /*!< [0x500] Timer Compare N Register */
} hw_flexio_t;
#pragma pack()

/*! @brief Macro to access all FLEXIO registers. */
/*! @param x FLEXIO module instance base address. */
/*! @return Reference (not a pointer) to the registers struct. To get a pointer to the struct,
 *     use the '&' operator, like <code>&HW_FLEXIO(FLEXIO_BASE)</code>. */
#define HW_FLEXIO(x)   (*(hw_flexio_t *)(x))

#endif /* __HW_FLEXIO_REGISTERS_H__ */
/* EOF */
